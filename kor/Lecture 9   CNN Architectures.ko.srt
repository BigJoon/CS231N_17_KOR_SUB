1
00:00:15,562 --> 00:00:22,506
9강입니다. 오늘은 CNN 아키텍쳐들을
한번 알아보겠습니다.

2
00:00:22,506 --> 00:00:28,516
수업에 앞서 몇 가지 공지사항을 전달해 드리겠습니다.
우선 과제 2는 목요일까지 입니다.

3
00:00:28,516 --> 00:00:37,665
중간고사는 다음 주인 5월 9일 목요일 수업시간이 진행하도록 하겠습니다.
그 전까지 중간고사 범위 진도를 모두 나갈 예정입니다.

4
00:00:37,665 --> 00:00:42,160
Recurrent neural network 까지 차질없이
진행할 수 있도록 하겠습니다.

5
00:00:42,160 --> 00:00:49,931
그리고 우리 수업의 포스터세션이 6월 6일 12시부터 3시까지
진행될 예정입니다. 우리 수업의 마지막 주가 되겠군요

6
00:00:49,931 --> 00:00:54,638
이번에는 포스터세션이 조금 일찍 열립니다.

7
00:00:54,638 --> 00:01:00,942
포스터 세션까지 아직 시간이 남아있으니
기말 레포트에 최선을 다해주시기 바랍니다.

8
00:01:04,135 --> 00:01:06,622
지난 시간에 배운 내용을 복습해 보겠습니다.

9
00:01:06,622 --> 00:01:10,134
지난 시간에 다양한 딥러닝 프레임워크들을 배웠습니다.

10
00:01:10,134 --> 00:01:13,500
도PyTorch, TensorFlow, Caffe2 등이 있었죠

11
00:01:15,324 --> 00:01:19,572
이런 프레임워크를 이용하게 되면 NN, CNN같은 규모가 큰
computraional graphs를 아주 쉽게 구성할 수 있었습니다.

12
00:01:19,572 --> 00:01:26,594
또한 그래프에서 gradients을 계산하기에도
아주 수월했습니다.

13
00:01:26,594 --> 00:01:33,225
네트워크 중간의 가중치와 입력변수들의 그레디언트를
알아서 계산해 주기 때문에 Train에 사용만 하면 됩니다.

14
00:01:33,225 --> 00:01:36,475
그리고 이 모든 것을 GPU를 통해 아주 효율적으로
동작시킬 수 있습니다.

15
00:01:38,468 --> 00:01:45,788
그리고 프레임워크들은 대게 이런 식으로
모듈화된 레이어를 통해 동작합니다.

16
00:01:45,788 --> 00:01:50,738
여러분이 과제로 작성했던 backward/forward pass와
아주 유사한 모습입니다.

17
00:01:50,738 --> 00:01:59,214
모델 아키텍쳐를 구성하기 위해서는 단지 그 레이어들을
하나의 시퀀스로 정의하고 묶어주기만 하면 됩니다.

18
00:01:59,214 --> 00:02:05,747
이를 통해 아주 복잡한 아키텍쳐라고 해도
손쉽게 구성할 수 있습니다.

19
00:02:07,436 --> 00:02:15,330
오늘은 최신 CNN 아키텍쳐들에 대해서 배워보겠습니다.

20
00:02:15,330 --> 00:02:20,441
사람들이 가장 많이 사용하는 아키텍쳐들을
아주 심도깊게 살펴볼 것입니다.

21
00:02:20,441 --> 00:02:22,935
 이들은 모두 ImageNet 첼린지에서 우승한 모델들이죠

22
00:02:22,935 --> 00:02:28,895
여기에는 제가 연대순으로 정렬했습니다. AlexNet, VGGNet,
GoogLeNet 그리고 ResNet이 있습니다.

23
00:02:28,895 --> 00:02:44,581
그리고 또한 엄청 잘 사용하지는 않지만 역사적인 관점에서
아주 흥미로운 모델들, 그리고 아주 최신의 모델들도 다룰 것입니다.

24
00:02:47,632 --> 00:02:51,649
아주 오래 전 강의에서 LeNet을 다룬 적이 있었습니다.

25
00:02:51,649 --> 00:02:56,413
LeNet은 산업에 아주 성공적으로 적용된 최초의 ConvNet입니다.

26
00:02:56,413 --> 00:03:06,588
LeNet은 이미지를 입력으로 받아서 stride = 1 인 5 x 5 필터를
거치고 몇 개의 Conv Layer와 pooling layer를 거칩니다.

27
00:03:06,588 --> 00:03:10,145
그리고 끝 단에 FC Layer가 붙습니다.

28
00:03:10,145 --> 00:03:15,130
엄청 간단한 모델이지만 숫자 인식에서
엄청난 성공을 거두었습니다.

29
00:03:17,840 --> 00:03:23,685
2012년에 AlexNet이 나왔습니다. 이 모델도 이전 강의에서
다들 본 적 있으실 것ㅇ비니다.

30
00:03:23,685 --> 00:03:31,989
AlexNet은 최초의 Large scale CNN 입니다. ImageNet
Classification Task을 아주 잘 수행했습니다.

31
00:03:31,989 --> 00:03:41,421
AlexNet은 2012년에 등장해서는 기존의 non-딥러닝 모델들을
능가하는 놀라운 성능을 보여줬습니다.

32
00:03:41,421 --> 00:03:48,822
AlexNet은 ConvNet 연구의 부흥을 일으킨 장본입니다.

33
00:03:48,822 --> 00:03:57,237
AlexNet은 기본적으로 conv - pool - normalization
구조가 두 번 반복됩니다.

34
00:03:59,231 --> 00:04:01,816
그리고 conv layer가 조금 더 붙고(CONV 3,4,5)
그 뒤에 pooling layer가 있습니다. (Max POOL3)

35
00:04:01,816 --> 00:04:04,232
그리고 마지막에는 FC-layer가 몇 개 붙습니다.
(FC6, FC7, FC8)

36
00:04:04,232 --> 00:04:10,576
생긴 것만 봐서는 기존의 LeNet과 상당히 유사합니다.
레이어만 더 많아졌습니다.

37
00:04:10,576 --> 00:04:19,197
AlexNet는 5개의 Conv Layer와
2개의 FC-Layer로 구성됩니다.

38
00:04:22,699 --> 00:04:26,740
그렇다면 이제 AlexNet 의 모델 크기를 한번 살펴봅시다.

39
00:04:26,740 --> 00:04:33,938
AlexNet의 ImageNet으로 학습시키는 경우
입력의 크기가 227 x 227 x 3 입니다.

40
00:04:33,938 --> 00:04:44,003
AlexNet의 첫 레이어를 살펴보면 11 x 11 필터가
stride = 4 로 96개가 존재합니다.

41
00:04:44,003 --> 00:04:50,133
그렇다면 잠시 멈춰서 생각해봅시다.
첫 레이어의 출력사이즈는 어떻게 될까요?

42
00:04:52,598 --> 00:04:54,181
힌트도 있습니다.

43
00:04:58,579 --> 00:05:12,251
입력과 Conv 필터의 사이즈를 알고 있습니다.
그리고 출력값의 차원도 여기 힌트로 있습니다.

44
00:05:12,251 --> 00:05:18,442
이 공식은 (전체 이미지 크기 - 필터 크기) / Stride + 1 이죠

45
00:05:18,442 --> 00:05:27,729
결국 출력차원은 55입니다.
답이 뭘까요?

46
00:05:27,729 --> 00:05:30,633
[학생이 대답]

47
00:05:30,633 --> 00:05:33,776
55 x 55 x 96 이라고 답했습니다. 맞습니다.

48
00:05:33,776 --> 00:05:38,923
출력값의 width, height는 각각 55 입니다.

49
00:05:38,923 --> 00:05:46,201
그리고 필터가 총 96개 이므로 depth가 96이 됩니다.

50
00:05:46,201 --> 00:05:50,296
자 그러면 이 레이어의 전체 파라미터 갯수는 몇 개일까요?

51
00:05:50,296 --> 00:05:53,629
명심해야 할 점은
11 x 11 필터가 총 96개 있다는 것입니다.

52
00:05:55,661 --> 00:05:58,563
[학생이 대답]

53
00:05:58,563 --> 00:06:01,563
96 x 11 x11 이라고 답했습니다.
거의 맞췄습니다.

54
00:06:02,755 --> 00:06:06,107
네 맞습니다. 3을 더 곱해줘야죠

55
00:06:06,107 --> 00:06:14,442
필터 하나가 11 x 11 x 3 을 통과합니다.
입력의 Depth가 3이죠

56
00:06:14,442 --> 00:06:19,793
답은 전체 필터의 크기 X 96 이 됩니다.

57
00:06:19,793 --> 00:06:23,960
첫 레이어에 35K의 파라미터가 있는 것입니다.

58
00:06:26,828 --> 00:06:31,043
자 그러면 두 번째 레이어를 한번 살펴봅시다.
두 번째 레이어는 Pooling Layer 입니다.

59
00:06:31,043 --> 00:06:34,814
여기에는 stride = 2 인 3 x 3 필터가 있습니다.

60
00:06:34,814 --> 00:06:38,981
이 레이어의 출력값의 크기는 어떻게 될까요?

61
00:06:41,511 --> 00:06:45,678
힌트도 드렸습니다. 지난 문제와 아주 유사합니다.

62
00:06:52,061 --> 00:06:57,077
27 x 27 x 96 이라고 답했습니다.
네 맞습니다.

63
00:06:58,526 --> 00:07:02,338
Pooling Layer에서는 힌트에 나와있는 공식이
적용될 것입니다.

64
00:07:02,338 --> 00:07:17,465
이 공식을 이용해서 width, height를 구할 수 있습니다.
다만 depth는 입력과 변하지 않습니다.

65
00:07:17,465 --> 00:07:22,337
입력의 Depth가 96 이었으니 출력의 Depth도 96 입니다.

66
00:07:23,635 --> 00:07:28,937
그렇다면 이 레이어의 파라미터는 몇 개일까요?

67
00:07:32,256 --> 00:07:35,164
[학생이 대답]

68
00:07:35,164 --> 00:07:37,715
없다고 대답했습니다. 네 맞습니다.

69
00:07:37,715 --> 00:07:41,611
Pooling layer에는 파라미터가 없죠.
훼이크였습니다.

70
00:07:43,549 --> 00:07:46,082
네 질문있나요?

71
00:07:46,082 --> 00:07:48,002
[학생이 질문]

72
00:07:48,002 --> 00:07:52,990
질문은 바로 왜 pooling layer에는 파라미터가
없는지 입니다.

73
00:07:52,990 --> 00:07:55,361
파라미터는 우리가 학습시키는 가중치입니다.

74
00:07:55,361 --> 00:07:57,321
Conv Layer에는 학습할 수 있는 가중치가 있습니다.

75
00:07:57,321 --> 00:08:03,046
반면 pooling의 경우에는 가중치가 없고 그저
특정 지역에서 큰 값을 뽑아내는 역할만 합니다.

76
00:08:03,046 --> 00:08:06,520
따라서 학습시킬 파라미터가 없는 것이죠

77
00:08:06,520 --> 00:08:15,060
다들 집에가서 모든 레이어의 파라미터 사이즈를 계산해
보면 아주 큰 도움이 될 것입니다.

78
00:08:17,283 --> 00:08:23,498
이는 AlexNet의 전체 구조입니다.

79
00:08:23,498 --> 00:08:32,730
Conv layer들의 파라미터 크기는  앞서 계산한 값과 유사할 것입니다.

80
00:08:32,730 --> 00:08:39,932
그리고 끝에 몇 개의 FC-Layer가 있었습니다.
4096개의 노드를 가진 레이어입니다.

81
00:08:39,933 --> 00:08:42,350
그리고 FC8 는 Softmax를 통과합니다.

82
00:08:43,499 --> 00:08:47,166
1000 ImageNet 클래스로 이동합니다.

83
00:08:48,849 --> 00:08:57,162
AlexNet을 조금 더 자세히 살펴보자면 우선 ReLU 를 사용했습니다.
ReLU는 딥러닝 모델에서 아주 보편화된 방법입니다.

84
00:08:57,162 --> 00:09:08,201
local response normalization layer는 채널간의
 normalization을 위한 것인데 요즘은 잘 사용하지 않습니다.

85
00:09:08,201 --> 00:09:12,747
큰 효과가 없는 것으로 알려졌기 때문입니다.

86
00:09:12,747 --> 00:09:22,579
data augumentation을 엄청 했습니다. 논문이 더 자세하지만
flipping, jittering, color norm 등을 적용하였습니다.

87
00:09:22,579 --> 00:09:29,537
data augumentation은 여러분이 프로젝트를
진행할 때 아주 유용한 기법입니다.

88
00:09:29,537 --> 00:09:33,229
AlexNet은 Dropout을 사용했습니다.
학습 시 Batch size는 128 입니다.

89
00:09:33,229 --> 00:09:37,993
그리고 우리도 지난 강의에서 배웠던
SGD momentum을 사용했습니다.

90
00:09:37,993 --> 00:09:43,105
그리고 초기 Learning rate 는 1e-2 입니다.

91
00:09:43,105 --> 00:09:50,955
그리고 val accuracy가 올라가지 않는 지점에서는 학습이 종료되는
시점까지 Learning rate를 1e-10까지 줄입니다.

92
00:09:50,955 --> 00:09:59,822
그리고 wight decay를 사용했고, 마지막에는
모델 앙상블로 성능을 향상시켰습니다.

93
00:09:59,822 --> 00:10:03,972
그리고 여러개의 모델을 앙상블시켜서
성능을 개선했습니다.

94
00:10:05,215 --> 00:10:09,591
그리고 한가지 더 말씀드릴 점은 여기 AlexNet
다이어그램을 보시면

95
00:10:09,591 --> 00:10:16,045
대체로 다른 Conv Net의 다이어그램과 유사하긴 하지만
한 가지 차이점이 있습니다.

96
00:10:16,045 --> 00:10:22,747
그것은 바로 모델이 두개로 나눠져서 서로 교차하는 것입니다.

97
00:10:23,987 --> 00:10:33,715
역사적으로 들여다보면 AlexNet을 학습할 당시에 GTX850
으로 학습시켰습니다. 이 GPU는 메모리가 3GB 뿐이죠

98
00:10:34,916 --> 00:10:38,065
전체 레이어를 GPU에 다 넣을 수 없었습니다.

99
00:10:38,065 --> 00:10:42,583
그래서 네트워크를 GPU에 분산시켜서 넣었습니다.

100
00:10:42,583 --> 00:10:47,265
각 GPU가 모델의 뉴런과 Feature Map을 반반씩 나눠가집니다.

101
00:10:47,265 --> 00:10:52,540
첫 번째 레이어를 살펴보면 출력이 55 x 55 x 96입니다.

102
00:10:55,199 --> 00:11:04,965
다이어그램을 유심히 살펴보면 각 GPU에서의
Depth가 48이라는 것을 알 수 있습니다.

103
00:11:05,859 --> 00:11:09,403
Feature Map을 절반씩 가지고 있는 것이죠

104
00:11:11,098 --> 00:11:18,177
AlexNet의 Conv 1,2,4,5 에서
어떤 일이 발생하는지 살펴봅시다.

105
00:11:18,177 --> 00:11:30,493
여기에서는 같은 GPU 내에 있는 Feature Map만 사용합니다.
 Conv 1,2,4,5는 전체 96 feature map을 볼 수 없습니다.

106
00:11:30,493 --> 00:11:34,660
 Conv 1,2,4,5는 48개의 Feature Map만 사용하는 셈입니다.

107
00:11:35,577 --> 00:11:48,506
이제 conv 3와 FC 6, 7, 8 를 한번 살펴봅시다. 이 레이어들은
이전 계층의 "전체 Feature map"과 연결되어 있습니다.

108
00:11:48,506 --> 00:11:55,001
이 레이어들에서는 GPU간의 통신을 하기 때문에 이전 입력
레이어의 전체 Depth를 전부 가져올 수 있는 것입니다.

109
00:11:55,001 --> 00:11:56,437
질문있나요?

110
00:11:56,437 --> 00:12:02,252
[학생이 질문]

111
00:12:06,393 --> 00:12:10,843
질문은 왜 여기에 예시가 full "simplified"
AlexNet architecture 인지 입니다.

112
00:12:10,843 --> 00:12:19,846
Simplified 라고 하는 이유는 여기에 AlexNet의
세부적인 것들을 전부 표시하지 않았기 때문입니다.

113
00:12:19,846 --> 00:12:26,078
가령  normalization layer 같은 경우에
자세히 기입해 놓지 않았습니다.

114
00:12:31,447 --> 00:12:38,659
그리고 AlexNet 논문의 아키텍쳐와 관련한 조그만
이슈가 하나 있습니다.

115
00:12:39,668 --> 00:12:53,531
논문의 그림에서는 첫 레이어가 224 x 224 라고 되어 있습니다.
하지만 실제 입력은 227 x 227 입니다.

116
00:12:55,792 --> 00:13:05,071
AlexNet은 Image Classification Benchmark의
2012년도에 우승한 모델입니다.

117
00:13:06,056 --> 00:13:15,003
AlexNet은 최초의 CNN기반 우승 모델이고 수년 전까지 대부분의
CNN 아키텍쳐의 베이스모델로 사용되어 왔습니다.

118
00:13:16,530 --> 00:13:18,790
물론 아직까지도 꽤 사용합니다.

119
00:13:18,790 --> 00:13:24,881
AlexNet은 다양한 Task의 transfer learning에 많이
사용되었습니다. 아주 오랜 시간 많은 사람들이 사용했고 -

120
00:13:24,881 --> 00:13:34,012
정말 유명한 모델이었습니다. 지금은 더 최신의 아키텍쳐가 많습니다.
일반적으로 AlexNet보다 성능이 더 뛰어나죠.

121
00:13:34,012 --> 00:13:40,092
이제는 더 최신의 모델들에 대해 살펴보겠습니다. 여러분이
실제도 더 자주 사용하게될 모델들입니다.

122
00:13:41,663 --> 00:13:48,623
그리고 2013년의 ImageNet Challange의 승자는
ZFNet 이라는 모델입니다.

123
00:13:48,623 --> 00:13:49,528
질문있나요?

124
00:13:49,528 --> 00:13:53,539
[학생이 질문]

125
00:13:53,539 --> 00:13:57,422
질문은 AlexNet이 기존의 모델들보다 뛰어날 수 있었던
이유가 무엇인지 입니다.

126
00:13:57,422 --> 00:14:05,596
이는 딥러닝와 Conv Net 때문입니다.
이들은 기존의 방법들과 완전히 다른 접근방법입니다.

127
00:14:05,596 --> 00:14:09,814
AlexNet이 최초로 딥러닝과 Conv Net을 적용하였습니다.

128
00:14:13,255 --> 00:14:19,108
2013년에는 ZFNet이 우승트로피를 획득했습니다.
ZF는 저자들의 이름을 딴 명칭입니다.

129
00:14:19,108 --> 00:14:24,559
ZFNet은 대부분 AlexNet의 하이퍼파라미터를 개선한 모델입니다.

130
00:14:24,559 --> 00:14:36,545
AlexNet과 같은 레이어 수이고 기존적인 구조도 같습니다.
다만 stride size, 필터 수 같은 하이퍼파라미터를 조절해서-

131
00:14:36,545 --> 00:14:42,179
AlexNet의 Error rate를 좀 더 개선시켰습니다.
AlexNet의 아이디어와는 기본적으로 같습니다.

132
00:14:42,179 --> 00:14:50,653
2014년에는 많은 변화가 있었습니다. 아키텍쳐도 많이 변했고
성능을 훨씬 향상되었죠

133
00:14:50,653 --> 00:14:58,988
가장 큰 차이점이라면 우선 네트워크가 훨씬 더 깊어졌다는 것입니다.

134
00:14:58,988 --> 00:15:13,131
2012/2013년에는 8개의 레이어였습니다. 하지만 2014년에는
19레이어와 22 레이어로 늘어났습니다. 훨씬 더 깊어졌죠

135
00:15:13,131 --> 00:15:17,312
2014년도의 우승자는 Google의 GoogLenet이었습니다.

136
00:15:17,312 --> 00:15:20,986
그리고 Oxford의 VGGNet이 2등을 차지했죠

137
00:15:20,986 --> 00:15:28,231
VGGNet은 Localization Challenge 등 일부 다른
트랙에서는 1위를 차지했습니다.

138
00:15:28,231 --> 00:15:32,768
이 둘 모두 아주 강력한 네트워크입니다.

139
00:15:32,768 --> 00:15:35,473
우선 VGG을 한번 살펴봅시다.

140
00:15:35,473 --> 00:15:41,628
VGGNet의 특징은 우선 훨씬 더 깊어졌고
그리고 더 작은 필터를 사용한다는 것입니다.

141
00:15:41,628 --> 00:15:51,184
AlexNet에서는 8개의 레이어였지만 VGGNet은
16에서 19개의 레이어를 가집니다.

142
00:15:53,100 --> 00:16:04,726
그리고 VGGNet은 아주 작은 필터만 사용합니다. 항상 3 x 3 필터만
사용합니다. 이웃픽셀을 포함할 수 있는 가장 작은 필터입니다.

143
00:16:04,726 --> 00:16:12,295
이렇게 작은 필터를 유지해 주고 주기적으로 Pooling을
수행하면서 전체 네트워크를 구성하게 됩니다.

144
00:16:12,295 --> 00:16:20,758
VGGNet은 아주 심플하면서도 고급진 아키텍쳐이고
ImageNet에서 7.3%의 Top 5 Error를 기록했습니다.

145
00:16:23,461 --> 00:16:28,252
그렇다면 VGGNet은 왜 더 작은 필터를 사용했을까요?

146
00:16:28,252 --> 00:16:34,181
우선 필터의 크기가 작으면 파라미터의 수가 더 적습니다.
따라서 큰 필터에 비해 레이어를 조금 더 많이 쌓을 수 있겠죠

147
00:16:34,181 --> 00:16:40,154
다시 말해 작은 필터를 사용하면 Depth를 더 키울 수 있는 것입니다.

148
00:16:40,154 --> 00:16:48,012
3 x 3 필터를 여러 개 쌓은 것은 결국 7 x 7 필터를 사용하는 것과
실질적으로 동일한 Receptive Filter를 가지는 것입니다.

149
00:16:48,012 --> 00:16:56,276
그렇다면 질문입니다. stride = 1 인 3 x 3필터를 세 개의
Receptive Filed는 어떻게 될까요?

150
00:16:56,276 --> 00:17:01,999
Stride가 1인 필터 세 개를 쌓게 되면
실질적인 Receptive Field가 어떻게 될까요?

151
00:17:01,999 --> 00:17:10,564
Receptive Field은 filter가 한번에 볼 수 있는 입력의
"Sparical area" 입니다.

152
00:17:13,123 --> 00:17:16,797
누군가가 15 픽셀이라고 했습니다.
왜 15 필셀인가요?

153
00:17:16,797 --> 00:17:21,419
[학생이 대답]

154
00:17:21,419 --> 00:17:28,179
네 맞습니다 필터들이 서로 겹치는 것입니다.

155
00:17:28,179 --> 00:17:36,478
실제로 어떤 일이 발생하는지 한번 살펴봅시다. 우선 첫 번째
레이어의 Receptive Field는 3 x 3 입니다.

156
00:17:36,478 --> 00:17:44,003
두 번째 레이어의 경우는 각 뉴런이 첫 번째 레이어 출력의
3 x 3 만큼을 보게 될 것입니다.

157
00:17:44,003 --> 00:17:52,486
그리고 3 x 3 중에 각 사이드는 한 픽셀씩 더 볼 수 있게 됩니다.

158
00:17:52,486 --> 00:17:57,233
따라서 두번째 레이어의 경우는 실제로
5 x 5의 receptive filed를 가지게 되는 것입니다.

159
00:17:57,233 --> 00:18:04,850
세 번째 레이어의 경우 두 번째 레이어의 3 x 3 을 보게됩니다.

160
00:18:04,850 --> 00:18:07,717
그리고 이 과정을 피라미드처럼 그려보면
결국 입력 레이어의 7 x 7을 보게되는 것이죠

161
00:18:07,717 --> 00:18:16,836
따라서 실질적인 Receptive Field는 여기에서 7 x 7 이 됩니다.
하나의 7 x 7 필터를 사용하는 것과 동일합니다.

162
00:18:16,836 --> 00:18:22,356
따라서 이는 7 x 7 필터와 실직적으로 동일한 receptive
filed를 가지면서도 더 깊은 레이어를 쌓을 수 있게 됩니다.

163
00:18:22,356 --> 00:18:27,011
더 깊게 쌓으므로써 Non-Linearity를 더 추가할 수 있고
파라미터 수도 더 적어지게 됩니다.

164
00:18:27,011 --> 00:18:37,346
전체 파라미터의 갯수를 살펴보면 3 x 3 필터에는
9개의 파라미터가 있습니다.

165
00:18:38,975 --> 00:18:45,458
3 x 3  가 되죠 그리고 Depth인 C가 있으니
3 x 3 x C 가 됩니다.

166
00:18:45,458 --> 00:18:51,844
그리고 출력 Feature Map의 갯수를 곱해줘야 하는데
이 경우에는 입력 Depth와 같습니다. C이죠

167
00:18:51,844 --> 00:19:00,975
따라서 각 레이터 당 3 x 3 x C x C 가 됩니다. 그리고 레이어가
세개 이므로 3을 더 곱해줍니다.

168
00:19:00,975 --> 00:19:08,219
 7 x 7 필터인 경우에는 7 x 7 x C x C 입니다.

169
00:19:08,219 --> 00:19:11,842
따라서 더 적은 파라미터를 가지게 됩니다.

170
00:19:16,380 --> 00:19:24,971
이제 전체 네트워크를 한번 살펴보도록 하겠습니다. 여기 숫자가
너무 많죠 다들 집으로 돌아가서 유심히 살펴보시기 바랍니다.

171
00:19:24,971 --> 00:19:31,526
AlexNet에서 우리가 계산해 봤던 것 처럼 파라미터의
크기와 수를 계산해 보실 수 있을 것입니다.

172
00:19:31,526 --> 00:19:33,327
연습으로 해보시면 아주 좋습니다.

173
00:19:33,327 --> 00:19:46,644
비슷한 패턴이 반복됩니다. Conv Layer와 Pooling Layer가
반복적으로 진행되는 것이죠

174
00:19:46,644 --> 00:19:53,241
VGG16에서 모든 Layer의 수를 세어보면 16개 입니다.

175
00:19:53,241 --> 00:20:01,288
VGG19의 경우 유사한 아키텍쳐이지만 Conv Layer가
조금 더 추가되었습니다.

176
00:20:03,831 --> 00:20:06,415
네트워크이 전체 메모리 사용량을 살펴봅시다.

177
00:20:06,415 --> 00:20:18,006
Forward pass 시 필요한 전체 메모리를 계산한 것입니다.

178
00:20:18,006 --> 00:20:23,935
그리고 각 노드가 4 bytes 의 메모리를 차지하므로
전체 약 100 MB의 메모리가 필요합니다.

179
00:20:23,935 --> 00:20:29,537
100MB가 전체 메모리 사용량이죠. 하지만 이 값은
Forward Pass 만 계산한 것입니다.

180
00:20:29,537 --> 00:20:36,280
Backward Pass를 고려한다면 더 많은 메모리가 필요할 것입니다.
VGG16은 메모리사용량이 많은 편입니다.

181
00:20:36,280 --> 00:20:45,220
전체 메모리가 5GB라면 이미지 하나당 100MB이므로
50장 밖에 처리할 수 없습니다.

182
00:20:48,110 --> 00:20:56,941
그리고 전체 파라미터의 갯수는 138M 개 입니다.
AlexNet의 경우에는 60M 개었죠

183
00:20:56,941 --> 00:20:58,291
질문있나요?

184
00:20:58,291 --> 00:21:01,708
[학생이 질문]

185
00:21:07,014 --> 00:21:10,730
질문은 "네트워크가 더 깊다"는게  "필터의 갯수가 더 많은 것"을
의미하는 것인지 "레이어의 갯수가 더 많은 것"을 의미하는 것인지 입니다.

186
00:21:10,730 --> 00:21:14,897
이 경우에는 레이어의 갯수를 의미합니다.

187
00:21:16,415 --> 00:21:26,026
Depth 라는 용어는 두 가지도 사용할 수 있습니다. 첫 째로는 채널의
Depth입니다. Width, Height, Depth 할때 Depth이죠

188
00:21:27,752 --> 00:21:35,108
반면 일반적으로 "네트워크의 깊이(Depth)"라고 할 때는
네트워크의 전체 레이어의 갯수 를 의미합니다.

189
00:21:35,108 --> 00:21:44,178
"학습 가능한 가중치를 가진 레이어의 갯수" 를 의미합니다.
가령 Conv Layer와 FC Layer 등 말입니다.

190
00:21:44,178 --> 00:21:47,678
[학생이 질문]

191
00:22:01,620 --> 00:22:06,984
질문은 하나의 Conv Layer 내에 여러개의 필터가 존재하는
이유가 무엇인지 입니다.

192
00:22:06,984 --> 00:22:13,853
지난 Conv Net 강의에서 다룬 적이 있습니다. 집에 돌아가서
한번 참고해 보시는 것이 좋을 것 같습니다. 어쩄든 -

193
00:22:13,853 --> 00:22:28,426
3 x 3 Conv 필터가 있다고 해봅시다. 필터는 한번에
3 x 3 x Depth를 보고 하나의 Feature Map을 만들어냅니다.

194
00:22:28,426 --> 00:22:32,764
그리고 입력 전체를 돌면서 하나의 Feature Map을
완성시킵니다.

195
00:22:32,764 --> 00:22:40,456
우리는 여러개의 필터를 사용할 수 있습니다. 가령 96개를 사용할 수
있겠죠. 그리고 각 필터는 하나의 Feature Map을 만듭니다.

196
00:22:40,456 --> 00:22:49,178
그리고 각 필터가 존재하는 이유는 서로 다른 패턴을
인식하기 위해서 라고 할 수 있습니다.

197
00:22:49,178 --> 00:22:56,991
각 필터는 각각의 Feature Map을 만들게 되는 것입니다.

198
00:22:59,571 --> 00:23:01,036
질문있나요?

199
00:23:01,036 --> 00:23:04,453
[학생이 질문]

200
00:23:08,275 --> 00:23:17,543
질문은 "네트워크가 깊어질수록 레이어의 필터 갯수를 늘려야
하는지" 입니다.(Channel Depth를 늘려야 하는지)

201
00:23:18,486 --> 00:23:22,576
여러분이 디자인하기 나름이고 반드시 그럴 필요는 없습니다.

202
00:23:22,576 --> 00:23:25,151
하지만 실제로 사람들이 Depth를 많이 늘리는 경우가 많습니다.

203
00:23:25,151 --> 00:23:31,408
Depth를 늘리는 이유 중 하나는 계산량을 일정하게 유지시키기
위해서 입니다(constant level of compute).

204
00:23:31,408 --> 00:23:38,801
보통 네트워크가 깊어질수록 각 레이어의 입력을
Down sampling하게 됩니다.

205
00:23:40,416 --> 00:23:46,569
Spatial area가 작아질수록 필터의 depth를
조금씩 늘려주게 됩니다.

206
00:23:46,569 --> 00:23:54,177
Width Height가 작아지기 때문에 Depth를 늘려도
부담이 없습니다.

207
00:23:54,177 --> 00:23:55,526
질문있나요?

208
00:23:55,526 --> 00:23:58,943
[학생이 질문]

209
00:24:00,682 --> 00:24:05,463
질문은 네트워크에 SoftMax Loss 대신
SVM Loss를 사용해도 되는지 입니다.

210
00:24:05,463 --> 00:24:10,571
지난 강의에서 다룬 내용입니다만
둘 다 사용할 수 있습니다.

211
00:24:10,571 --> 00:24:18,052
하지만 보통 SoftMax Loss를 일반적으로 사용하는 편입니다.

212
00:24:19,319 --> 00:24:20,833
네 질문있나요?

213
00:24:20,833 --> 00:24:24,333
[학생이 질문]

214
00:24:38,712 --> 00:24:46,208
질문은 "앞서 계산한 메모리 중에 굳이 가지고 있지 않고
버려도 되는 부분이 있는지" 입니다.

215
00:24:46,208 --> 00:24:50,031
예 맞습니다.
일부는 굳이 가지고있지 않아도 됩니다.

216
00:24:50,031 --> 00:25:03,381
하지만 Backword pass시 chain rule을 계산할 때
대부분은 이용됩니다. 따라서 대부분은 반드시 가지고있어야겠죠

217
00:25:04,816 --> 00:25:15,250
파라미터가 존재하는 곳들의 메모리 사용분포를 살펴보면
초기 레이어에서 많은 메모리를 사용하는 것을 알 수 있습니다.

218
00:25:15,250 --> 00:25:24,864
Sparial dimention이 큰 곳들이 메모리를 더 많이 사용합니다.
그리고 마지막 레이어는 많은 파라미터를 사용합니다.

219
00:25:24,864 --> 00:25:29,647
FC-Layer이엄청난 양의 파라미터를 사용합니다.
dense connection이기 때문이죠

220
00:25:29,647 --> 00:25:37,809
그리고 나중에 더 알아보겠지만 최근에 일부 네트워크들은

221
00:25:37,809 --> 00:25:43,155
아얘 FC Layer를 없애버리기도 합니다.
너무 많은 파라미터를 줄이기 위해서죠

222
00:25:43,155 --> 00:25:48,869
그리도 또 한가지 말씀드릴 점은 여기에 각 레이어들을
부르는 명칭이 있을 수 있습니다.

223
00:25:48,869 --> 00:25:57,000
제가 여기에 써 놓은것 처럼 conv3-64는
64개의 필터를 가진 3 x 3 conv 필터입니다.

224
00:25:57,000 --> 00:26:06,000
그리고 다이어그램의 오른쪽을 보시면 각 필터를 묶어놓았습니다.
사람들이 많이 쓰는 방법입니다.

225
00:26:06,000 --> 00:26:12,632
여기 오렌지색 블락을 보시면 첫번째 그룹(part 1)의
conv들은 conv1-1, conv1-2 이렇게 표현합니다.

226
00:26:12,632 --> 00:26:15,465
알고계시면 좋습니다.

227
00:26:17,404 --> 00:26:22,930
VGGNet은 ImageNet 2014 Classification
Challenge에서 2등을 했습니다.

228
00:26:22,930 --> 00:26:25,593
Localization에서는 우승을했죠

229
00:26:25,593 --> 00:26:29,847
학습 과정은 AlexNet과 유사합니다.

230
00:26:29,847 --> 00:26:39,574
다만 Local response normalization은 사용하지 않습니다.
앞서 언급했듯 도움이 크게 안되기 떄문이었죠

231
00:26:39,574 --> 00:26:50,425
VGG16과 VGG19은 아주 유사합니다. 다만 VGG19가
조금 더 깊을 뿐이죠

232
00:26:50,425 --> 00:27:01,176
VGG19가 아주 조금 더 좋습니다. 메모리도 조금 더 쓰죠.  여러분은
두 모델 모두 사용할 수 있겠지만 보통 16을 더 많이 사용합니다.

233
00:27:02,280 --> 00:27:10,920
그리고 AlexNet에서 처럼 모델 성능을 위해서 앙상블 기법을 사용했습니다.

234
00:27:10,920 --> 00:27:20,968
그리고 VGG의 마지막 FC-Layer인 FC7은 이미지넷 1000 class
의 바로 직전에 위치한 레이어입니다.

235
00:27:20,968 --> 00:27:27,273
이  FC7은 4096 사이즈의 레이어인데 아주 좋은
feature represetation을 가지고 있는 것으로 알려져있습니다.

236
00:27:27,273 --> 00:27:35,865
다른 데이터에서도 특징(feature) 추출이 잘되며
다른 Task에서도 일반화 능력이 뛰어난 것으로 알려져있습니다.

237
00:27:35,865 --> 00:27:38,602
FC7은 아주 좋은 feature representation입니다.

238
00:27:38,602 --> 00:27:39,952
예 질문있나요?

239
00:27:39,952 --> 00:27:45,242
[학생이 질문]

240
00:27:46,749 --> 00:27:50,846
질문은 "localization이 무엇인지" 입니다.
(VGG가 localization task에서 우승)

241
00:27:50,846 --> 00:27:57,973
localization은 task입니다. 나중 강의에서 Detection과
Localization을 다룰 예정입니다.

242
00:27:57,973 --> 00:28:04,015
여기에서 더 자세히 말씀드리지는 않겠지만 기본적으로
"이미지에 고양이가 있는지?" 를 분류하는 것 뿐만 아니라

243
00:28:04,015 --> 00:28:10,243
정확히 고양이가 어디에 있는지 네모박스를
그리는 것입니다.

244
00:28:10,243 --> 00:28:16,963
Detection과는 조금 다릅니다. Detection은 이미지 내에
다수의 객체가 존재할 수 있습니다.

245
00:28:16,963 --> 00:28:23,481
localization은 이미지에 객체가 하나만 있다고 가정하고
이미지를 분류하고 추가적으로 네모박스도 쳐야합니다.

246
00:28:26,153 --> 00:28:33,192
지금까지는 VGGNet에 대해서 알아보았습니다. 이제는
GoogLeNet에 대해서 알아보겠습니다.

247
00:28:33,192 --> 00:28:37,413
2014년 Classification Challenge에서 우승한 모델입니다.

248
00:28:38,422 --> 00:28:48,586
저GoogLeNet도 엄청 깊은 네트워크입니다. 22개의 레이어를 가지고있죠.
그런데 GoogLeNet에서 가장 중요한 것은

249
00:28:48,586 --> 00:28:58,676
효율적인 계산에 관한 그들의 특별한 관점이 있다는 것과 높은 계산량을
아주 효율적으로 수행하도록  네트워크를 디자인했다는 점입니다.

250
00:28:58,676 --> 00:29:05,833
GoogLeNet은 Inception module을 사용합니다. 앞으로 더
깊이 배울 내용입니다. 기본적으로 GoogLeNet은

251
00:29:05,833 --> 00:29:09,146
Inception module을 여러개 쌓아서 만듭니다.

252
00:29:09,146 --> 00:29:20,651
GoogLeNet에는 FC-Layer가 없습니다. 파라미터를 줄이기 위해서죠.
전체 파라미터 수가 5M 정도입니다. 60M인 AlexNet보다 적죠

253
00:29:20,651 --> 00:29:25,118
그럼에도 불구하고 훨씬 더 깊습니다.

254
00:29:25,118 --> 00:29:27,785
 ILVRC 14에서 6.7%의 top-5 error로 우승을 거머쥡니다.

255
00:29:32,202 --> 00:29:36,173
그렇다면 inception module이 무엇일까요?
inception module가 만들어지게된 배경을 살펴보면

256
00:29:36,173 --> 00:29:40,833
그들은 "a good local network typology"를
디자인하고 싶었습니다.

257
00:29:40,833 --> 00:29:53,151
그리고 "network within a network" 라는 개념으로
local topology를 구현했고 이를 쌓아올렸습니다.

258
00:29:53,151 --> 00:29:59,197
이 Local Network를 Inception Module이라고 합니다.

259
00:29:59,197 --> 00:30:07,948
Inception Module 내부에는 동일한 입력을 받는 서로 다른
다양한 필터들이 "병렬로" 존재합니다.

260
00:30:07,948 --> 00:30:12,706
이전 레이어의 입력을 받아서 다양한 Conv 연산을 수행하는 것이죠

261
00:30:12,706 --> 00:30:26,457
1x1 / 3x3 / 5x5 conv에 Pooling도 있습니다. 여기에서는
3x3 pooling이죠 각 레이어에서 각각의 출력 값들이 나오는데

262
00:30:26,457 --> 00:30:32,309
그 출력들을 모두 Depth 방향으로 합칩니다(concatenate).

263
00:30:32,309 --> 00:30:39,703
그렇게 합치면 하나의 tensor로 출력이 결정되고
이 하나의 출력을 다음 레이어로 전달하는 것입니다.

264
00:30:41,830 --> 00:30:50,825
지금까지는 다양한 연산을 수행하고 이를 하나로 합쳐준다는
아주 단순한 방식(naive way)을 살펴봤습니다.

265
00:30:50,825 --> 00:30:53,196
그렇다면 이 방법의 문제가 무엇일까요?

266
00:30:53,196 --> 00:30:58,527
문제는 바로 계산 비용에 있습니다.

267
00:30:59,792 --> 00:31:11,966
예제를 자세히 들여다봅시다. 우선 128개의 1x1 필터가 있습니다.
192개의 3x3 필터와 96개의 5x5 필터도 있습니다.

268
00:31:11,966 --> 00:31:20,208
그리고 stride를 조절하여 입/출력 간의
spatial dimention을 유지시켜줍니다.

269
00:31:22,151 --> 00:31:30,041
이 경우에 1 x 1 x 128 conv의 출력은 어떻게 될까요?

270
00:31:36,720 --> 00:31:40,720
네 맞습니다. 28 x 28 x 128이 되겠죠.

271
00:31:41,798 --> 00:31:53,969
1x1 conv의 경우 입력에 맞춰 depth는 256입니다.

272
00:31:53,969 --> 00:32:01,004
그리고 128개의 필터 하나 당 28 x 28 Feature map을
생성하게 될 것입니다.

273
00:32:01,004 --> 00:32:03,171
그렇다면 출력은 28 x 28 x 128 이 되겠죠

274
00:32:06,279 --> 00:32:15,749
이런 방식으로 각 필터의 출력 값을 계산해보면

275
00:32:15,749 --> 00:32:21,189
3 x 3 conv의 경우에 출력이 28 x 28 x 192이 될 것이고

276
00:32:21,189 --> 00:32:25,369
5 x 5 conv의 경우에 96개의 필터이므로
 출력이 28 x 28 x 96 이 될 것입니다.

277
00:32:25,369 --> 00:32:35,522
Pooling Layer는 input에서 depth가 변하지 않습니다.

278
00:32:35,522 --> 00:32:41,002
그리고 Stride를 잘 조절해서 Spatial dimention를
유지하면 입력과 출력의 크기는 같습니다.

279
00:32:42,035 --> 00:32:52,308
그렇다면 모든 출력 값들을 합친(concat) 사이즈를 계산해봅시다.
28 x 28 은 동일하고 depth가 점점 쌓이게 됩니다.

280
00:32:52,308 --> 00:33:00,140
28 x 28 에 모든 depth를 더하면
최종적으로 28 x 28 x 672이 됩니다.

281
00:33:01,923 --> 00:33:11,018
Inception module의 입력은 28 x 28 x 256 이었으나
출력은 28 x 28 x 672 이 된 것입니다.

282
00:33:12,276 --> 00:33:18,064
spatial dimention은 변하지 않았지만
depth가 엄청나게 불어난 것이죠

283
00:33:18,064 --> 00:33:18,998
질문있나요?

284
00:33:18,998 --> 00:33:22,715
[학생이 질문]

285
00:33:22,715 --> 00:33:26,356
질문은 어떻게 출력의 spatial dimention이
28 x 28이 될 수 있는지 입니다.

286
00:33:26,356 --> 00:33:30,117
이 경우는 spatial dimention을 유지하기 위해서
zero padding을 한 경우입니다.

287
00:33:30,117 --> 00:33:34,213
그리고 depth-wise로 합쳤습니다(concat).

288
00:33:35,205 --> 00:33:37,043
질문있나요?

289
00:33:37,043 --> 00:33:40,460
[학생이 질문]

290
00:33:45,634 --> 00:33:48,615
질문은 입력의 depth가 256인 이유가 무엇인지 입니다.

291
00:33:48,615 --> 00:33:54,624
현재 입력은 네트워크의 입력이 아닙니다. 네트워크
중간에 있는 어떤 한 레이어의 입력인 것이죠

292
00:33:54,624 --> 00:34:01,316
256이라는 값은 바로 직전에 있던 inception module의
출력 depth라고 할 수 있습니다.

293
00:34:01,316 --> 00:34:09,248
현재 레이어의 출력이 28 x 28 x 672 이었습니다.
이 값이 다음 레이어로 넘어가는 것입니다 .

294
00:34:09,248 --> 00:34:10,725
질문있나요?

295
00:34:10,726 --> 00:34:14,143
[학생이 질문]

296
00:34:17,849 --> 00:34:23,991
질문은 어떻게 1 x 1 conv의 출력이 
28 x 28 x 128이 되는지 입니다.

297
00:34:23,991 --> 00:34:34,868
이 필터는 1 x 1 conv 필터입니다. 이 필터가
입력 28 x 28 x 256 돌아다니면서 conv연산을 수행하겠죠

298
00:34:36,295 --> 00:34:42,766
1 x 1 conv는 입력의 depth인 256 만 가지고
내적을 한다고 보시면 됩니다.

299
00:34:42,766 --> 00:34:47,793
그렇게 되면 필터 하나 당 28 x 28 x 1 의
feature map을 얻게 될 것입니다.

300
00:34:47,793 --> 00:34:59,121
다시 말해 입력의 각 픽셀마다 값이 하나 씩 계산됩니다. 
그러면 필터당 28 x 28 x 1이 되겠죠. 그리고 필터가 128개 입니다.

301
00:35:01,860 --> 00:35:05,610
따라서 28 x 28 x 128 이 되는 것입니다.

302
00:35:06,619 --> 00:35:11,213
그리고 이 레이어들의 계산량을 한번 살펴봅시다

303
00:35:11,213 --> 00:35:23,363
첫 번째 예시로 1 x 1 conv를 살펴봅시다. 1 x 1 conv는 
각 픽셀마다 1 x 1 x 256 개의 내적연산을 수행합니다.

304
00:35:25,355 --> 00:35:29,168
따라서 픽셀 당 256번의 곱셈 연산이 수행되는 것이죠
(Conv Ops:맨 뒤의 256)

305
00:35:29,168 --> 00:35:38,675
그리고 픽셀이 총 28 x 28 이므로 
처음 "28  x 28" 이 여기에 해당합니다.

306
00:35:38,675 --> 00:35:54,669
그리고 이런 연산을 수행하는 필터가 총 256개 있으므로

307
00:35:54,669 --> 00:36:02,031
1 x 1 conv에서의 전체 연산량은 
28 x 28 x 128 x 256 입니다.

308
00:36:02,939 --> 00:36:11,159
이런 식으로 3x3/5x5 conv 의 연산량도 계산해 볼 수 있습니다.

309
00:36:11,159 --> 00:36:17,500
따라서 하나의 Inception Module에서의 
전체 연산량은 854M 가 됩니다.

310
00:36:18,778 --> 00:36:22,001
[학생이 질문] 
각 필터의 depth인 128, 192, 96이 의미가 있는지

311
00:36:22,941 --> 00:36:29,854
이 값들을 제가 임의로 정한 값들입니다.

312
00:36:29,854 --> 00:36:36,404
하지만 실제 Inception Net에서도 비슷한 값이긴 합니다.

313
00:36:36,404 --> 00:36:43,913
GoogLeNet의 각 Inception Module에는 파라미터 값이
다양하기 때문에 그 중 일부를 참고한 값들입니다.

314
00:36:45,899 --> 00:36:49,856
아무튼 이는 연산량이 아주 많습니다.

315
00:36:49,856 --> 00:36:56,317
그리고 Pooling layer 또한 문제를 악화시킵니다. 왜냐하면 
입력의 Depth를 그대로 유지하기 때문입니다.

316
00:36:57,872 --> 00:37:04,329
레이어를 거칠때마다 Depth가 점점 늘어만 갑니다.

317
00:37:04,329 --> 00:37:11,323
Pooling의 출력은 이미 입력의 Depth와 동일하고 여기에 
다른 레이어의 출력이 계속해서 더해지게 되는 것입니다.

318
00:37:11,323 --> 00:37:19,770
이 경우에는 입력의 Depth는 256이었지만 출력은 672이 됩니다. 
그리고 레이어를 거칠수록 점점 더 늘어나게 되는 것이죠

319
00:37:22,730 --> 00:37:26,251
이 문제를 어떻게 해결할 수 있을까요?

320
00:37:26,251 --> 00:37:36,991
GoogLeNet에서 사용한 key insight는 "bottleneck 
layer" 를 이용하는 것입니다. Conv 연산을 수행하기에 앞서

321
00:37:36,991 --> 00:37:43,984
입력을 더 낮은 차원으로 보내는 것이죠

322
00:37:45,817 --> 00:37:47,452
낮은 차원으로 보낸다는 것이 어떤 의미일까요?

323
00:37:47,452 --> 00:37:58,890
1x1 conv를 다시 한번 살펴봅시다. 1x1 conv는 각 
spatial location에서만 내적을 수행합니다.

324
00:38:00,951 --> 00:38:06,949
그러면서 depth만 줄일 수 있습니다. 입력의 depth를
더 낮은 차원으로 projection 하는 것입니다.

325
00:38:06,949 --> 00:38:11,325
Input feature map들 간의
선형결합(linear combination) 이라고 할 수 있습니다.

326
00:38:13,690 --> 00:38:19,009
주요 아이디어는 바로 입력의 depth를 줄이는 것입니다.

327
00:38:19,009 --> 00:38:29,895
각 레이어의 계산량은 1x1 conv를 통해 줄어듭니다.

328
00:38:29,895 --> 00:38:36,972
3x3/5x5 conv 이전에 1x2이 추가됩니다.

329
00:38:36,972 --> 00:38:43,125
그리고 polling layer 후에도 1x1 conv가 추가되죠

330
00:38:44,094 --> 00:38:48,419
1x1 conv가 bottleneck layers의 역할로 추가되는 것입니다.

331
00:38:49,372 --> 00:38:53,546
그렇다면 다시한번 계산량을 세어봅시다

332
00:38:53,546 --> 00:38:59,399
우선 이전과 입력은 동일합니다. 
28 x 28 x 256 이죠

333
00:38:59,399 --> 00:39:13,666
1 x 1 conv가 depth 의 차원을 줄여줍니다. 3 x 3 conv 
앞쪽의 1 x 1 conv의 출력은 28 x 28 x 64 이죠

334
00:39:14,994 --> 00:39:25,964
앞선 예시 처럼 28 x 28 x 256 을 입력인 대신에 
28 x 28 x 64인 것입니다. .

335
00:39:25,964 --> 00:39:32,264
conv의 입력이 더 줄어든 셈입니다.

336
00:39:32,264 --> 00:39:41,309
3x3 뿐만 아니라 5x5 conv와 pooling layer에서도
동일한 작용을 하게됩니다.

337
00:39:42,372 --> 00:39:52,024
그렇다면 이제 전체 계산량을 계산해봅시다.
현재는 1x1 conv가 추가된 상태입니다.

338
00:39:52,024 --> 00:40:03,309
계산해보면 전체 358M번의 연산을 수행합니다. 
기존의 854M보다 훨씬 줄어든 셈입니다.

339
00:40:03,309 --> 00:40:11,248
이를 통해 배울 수 있는 점은 1x1 conv를 이용하면 
계산량을 조절할 수 있다는 사실입니다.

340
00:40:11,248 --> 00:40:12,928
질문있나요?

341
00:40:11,723 --> 00:40:15,112


342
00:40:12,928 --> 00:40:16,345
[학생은 마이크에서 소리 쳤다]

343
00:40:15,112 --> 00:40:18,195


344
00:40:18,195 --> 00:40:25,923


345
00:40:24,335 --> 00:40:27,317
- 네, 질문이 있습니다.

346
00:40:25,923 --> 00:40:32,658


347
00:40:27,317 --> 00:40:30,028
이 정보를 하나씩 처리하면 어떤
정보가 손실 될 수 있습니다.

348
00:40:30,028 --> 00:40:31,789
처음에는 전환 할 수 있습니다.

349
00:40:31,789 --> 00:40:35,922
그래서 정보가 손실 될 수도 있습니다.

350
00:40:32,658 --> 00:40:43,333


351
00:40:35,922 --> 00:40:38,455
그러나 동시에이 계획을하고 있다면

352
00:40:38,455 --> 00:40:41,565
당신은이 입력들의 선형 결합을 취하고 있습니다.

353
00:40:41,565 --> 00:40:45,065
그들에 중복성이있는 특징지도,

354
00:40:43,333 --> 00:40:45,482


355
00:40:45,482 --> 00:40:53,487


356
00:40:46,675 --> 00:40:48,433
당신은 그들의 조합을 복용하고 있습니다.

357
00:40:48,433 --> 00:40:50,647
추가 비선형 성을 도입하고 있습니다.

358
00:40:50,647 --> 00:40:53,399
하나씩 전환 한 후에도 실제로

359
00:40:53,399 --> 00:40:55,565
조금 더 추가하면 이런 식으로 도움이됩니다.

360
00:40:55,565 --> 00:41:00,232
깊이가 있기 때문에 엄격한 분석이 없다고 생각합니다.

361
00:41:00,232 --> 00:41:03,954
이것의, 그러나 기본적으로
일반적으로 이것은 잘 작동합니다.

362
00:41:03,954 --> 00:41:08,124
왜 도움이되는지에 대한 이유가 있습니다.

363
00:41:08,124 --> 00:41:11,693
여기까지 OK. 기본적으로 하나씩 사용하고 있습니다.

364
00:41:11,693 --> 00:41:16,437
우리의 계산상의 복잡성을 관리하는
데 도움이되는 convs,

365
00:41:16,437 --> 00:41:18,972
GooleNet이하는 일은 다음과 같습니다.

366
00:41:18,972 --> 00:41:20,156
시작 모듈과 스택 될 것입니다.

367
00:41:20,156 --> 00:41:21,260
모두 함께.

368
00:41:21,260 --> 00:41:23,637
이것이 완전한 시작 구조입니다.

369
00:41:22,334 --> 00:41:24,068


370
00:41:23,637 --> 00:41:28,222
그리고 우리가 조금 더 자세하게 본다면,

371
00:41:24,068 --> 00:41:30,176


372
00:41:28,222 --> 00:41:29,651
그래서 여기 나는 그것을 뒤집었다.

373
00:41:29,651 --> 00:41:31,701
그것이 너무 커서, 적합하지 않을 것이기 때문에

374
00:41:30,176 --> 00:41:35,753


375
00:41:31,701 --> 00:41:33,583
더 이상 슬라이드에서 수직으로.

376
00:41:33,583 --> 00:41:35,868
먼저 우리는이 줄기를 가지고 있습니다.

377
00:41:35,868 --> 00:41:39,717
네트워크이므로 바닐라 평원의 종류가 더 많습니다.

378
00:41:38,703 --> 00:41:40,602


379
00:41:39,717 --> 00:41:42,012
우리가 이전에 본 conv net [mumbles]

380
00:41:40,602 --> 00:41:42,678


381
00:41:42,012 --> 00:41:44,066
레이어의 6 시퀀스입니다.

382
00:41:42,678 --> 00:41:46,186


383
00:41:44,066 --> 00:41:46,888
그래서 다른 수영장에 몇 가지 convs conv 수영장

384
00:41:46,888 --> 00:41:49,380
시작하기 만하면됩니다.

385
00:41:49,380 --> 00:41:52,321
우리는 우리의 다양한 다른 시작을 가지고 있습니다.

386
00:41:52,321 --> 00:41:55,721
모듈은 모두 서로 겹쳐 쌓여 있으며,

387
00:41:55,721 --> 00:41:59,243
위에서 우리는 분류 자 결과를 얻습니다.

388
00:41:59,243 --> 00:42:01,288
그리고 그들이 정말로 제거했음을 여기에 주목하십시오.

389
00:42:00,004 --> 00:42:01,706


390
00:42:01,288 --> 00:42:03,002
고가의 완전 연결 층

391
00:42:01,706 --> 00:42:06,047


392
00:42:03,002 --> 00:42:06,887
그 모델이 그들없이 훌륭하게 작동한다는 것이 밝혀졌습니다.

393
00:42:06,887 --> 00:42:09,792
심지어 당신은 많은 매개 변수를 줄입니다.

394
00:42:08,458 --> 00:42:12,784


395
00:42:09,792 --> 00:42:12,875
그리고 그들이 또한 여기에있는 것은,

396
00:42:12,784 --> 00:42:16,284


397
00:42:14,643 --> 00:42:17,057
당신은 여분의 줄기가 나온 것을 볼 수 있습니다.

398
00:42:17,057 --> 00:42:19,676
이들은 보조 분류 결과입니다

399
00:42:17,311 --> 00:42:21,204


400
00:42:19,676 --> 00:42:24,083
그리고 이것들은 또한 당신이 알고있는
단지 작은 미니 네트워크들입니다.

401
00:42:21,204 --> 00:42:30,586


402
00:42:24,083 --> 00:42:27,036
평균 풀링, 하나씩의 전환,

403
00:42:27,036 --> 00:42:30,027
여기에 완전히 연결된 레이어 몇 개

404
00:42:30,027 --> 00:42:33,360
부드러운 최대 및 또한 1000 방법 SoftMax

405
00:42:30,586 --> 00:42:35,184


406
00:42:35,218 --> 00:42:36,512
ImageNet 클래스로.

407
00:42:36,512 --> 00:42:39,376
그리고 실제로 ImageNet 교육을 사용하고 있습니다.

408
00:42:39,376 --> 00:42:42,160
여기 세 곳의 분류 손실.

409
00:42:42,160 --> 00:42:46,384
네트워크의 표준 엔드뿐만 아니라

410
00:42:44,206 --> 00:42:53,518


411
00:42:46,384 --> 00:42:49,699
네트워크에서 두 곳 더 일찍, 그 이유는

412
00:42:49,699 --> 00:42:52,562
그들은 이것이 깊은 네트워크라는 것입니다.

413
00:42:52,562 --> 00:42:54,891
그들은이 보조적인 보조물

414
00:42:53,518 --> 00:43:00,004


415
00:42:54,891 --> 00:42:58,641
분류 출력, 당신은 더 많은 그라데이션을 얻을

416
00:43:00,861 --> 00:43:02,950
이전 계층에 주입 된 교육,

417
00:43:02,950 --> 00:43:05,771
그래서 더 많은 도움이되는 신호가 흐르고 있습니다.

418
00:43:05,771 --> 00:43:08,521
이 중간층은 또한

419
00:43:07,450 --> 00:43:08,593


420
00:43:08,521 --> 00:43:09,354
도움이됩니다.

421
00:43:10,323 --> 00:43:11,708
당신은 분류를 할 수 있어야합니다.

422
00:43:11,708 --> 00:43:14,294
이들 중 일부를 기반으로합니다.

423
00:43:14,294 --> 00:43:17,885
그리고 이것이 전체 아키텍처입니다.

424
00:43:17,885 --> 00:43:21,521
가중치가있는 22 개의 레이어가 있습니다.

425
00:43:20,502 --> 00:43:37,733


426
00:43:21,521 --> 00:43:25,166
이들 각각의 모듈 내에서 각각 하나씩,

427
00:43:25,166 --> 00:43:27,622
3 x 3, 5 x 5는 무게 층,

428
00:43:27,622 --> 00:43:30,284
이러한 모든 병렬 레이어를 포함하는 것만으로도,

429
00:43:30,284 --> 00:43:34,451
일반적으로 비교적 신중하게 설계된 제품입니다.

430
00:43:38,470 --> 00:43:41,908
아키텍처 및 일부는이 중 일부를 기반으로합니다.

431
00:43:40,794 --> 00:43:42,271


432
00:43:41,908 --> 00:43:44,938
우리가 말하는 직관력과 그 일부

433
00:43:42,271 --> 00:43:45,233


434
00:43:44,938 --> 00:43:48,387
또한 그들이 알고있는 구글 저자들

435
00:43:45,233 --> 00:43:51,385


436
00:43:48,387 --> 00:43:51,046
거대한 클러스터와 교차 검증

437
00:43:51,046 --> 00:43:53,826
모든 종류의 디자인 선택과 이것이 무엇인가?

438
00:43:51,385 --> 00:44:00,384


439
00:43:53,826 --> 00:43:56,321
결국 잘 작동했다.

440
00:43:56,321 --> 00:43:57,915
문제?

441
00:43:57,915 --> 00:44:01,332
[학생은 마이크에서 소리 쳤다]

442
00:44:00,384 --> 00:44:06,130


443
00:44:06,130 --> 00:44:09,328


444
00:44:09,328 --> 00:44:16,954


445
00:44:16,954 --> 00:44:20,739


446
00:44:20,739 --> 00:44:26,734


447
00:44:25,252 --> 00:44:28,071
- 그래, 문제는 보조 출력

448
00:44:26,734 --> 00:44:30,040


449
00:44:28,071 --> 00:44:31,224
실제로 최종 분류에 유용합니다.

450
00:44:30,040 --> 00:44:36,273


451
00:44:31,224 --> 00:44:33,267
이것도 사용 하시겠습니까?

452
00:44:33,267 --> 00:44:35,026
나는 그들이 그들을 훈련 할 때 생각한다.

453
00:44:35,026 --> 00:44:38,214
그들은 나오는 모든 손실을 평균 처리합니다.

454
00:44:36,273 --> 00:44:46,667


455
00:44:38,214 --> 00:44:39,974
나는 그들이 도움이된다고 생각한다.

456
00:44:39,974 --> 00:44:42,180
나는 최종 아키텍처에서,

457
00:44:42,180 --> 00:44:44,765
그들이이 모든 것들의 평균을 내건 하나를 택하든,

458
00:44:44,765 --> 00:44:47,178
그들이 모두를 사용할 가능성이 매우 높습니다.

459
00:44:47,178 --> 00:44:50,082
그러나 당신은 그것을 확인해야 할 것입니다.

460
00:44:50,082 --> 00:44:53,499
[학생은 마이크에서 소리 쳤다]

461
00:44:54,291 --> 00:44:58,494


462
00:44:59,162 --> 00:45:01,411
- 그래서 문제는 병목 층에 관한 것이고,

463
00:45:01,411 --> 00:45:05,389
다른 유형의 차원을 사용할 수 있습니까?

464
00:45:01,966 --> 00:45:03,664


465
00:45:03,664 --> 00:45:09,653


466
00:45:05,389 --> 00:45:09,518
축소 및 예 다른 차원의 차원 사용할 수 있습니다.

467
00:45:09,518 --> 00:45:11,029
절감.

468
00:45:11,029 --> 00:45:13,893
이 하나 하나의 conv의 장점은 다음과 같습니다.

469
00:45:13,893 --> 00:45:16,232
당신은이 효과를 얻고 있습니다. 그러나 그것은 모두입니다.

470
00:45:16,232 --> 00:45:17,948
다른 레이어와 마찬가지로 전환 레이어입니다.

471
00:45:17,948 --> 00:45:19,664
너는 이것들의 영혼 네트워크를 가지고있다.

472
00:45:19,664 --> 00:45:21,350
너는이 전체 네트워크를 훈련시킨다.

473
00:45:21,350 --> 00:45:23,646
모든 것을 통해 다시 [mumbles]

474
00:45:23,646 --> 00:45:25,157
그것을 결합하는 방법을 배우고 있습니다.

475
00:45:25,157 --> 00:45:26,990
이전 기능 맵.

476
00:45:29,411 --> 00:45:31,540
그래, 뒷문에 질문 해.

477
00:45:31,540 --> 00:45:34,957
[학생은 마이크에서 소리 쳤다]

478
00:45:36,617 --> 00:45:40,284
- 예, 질문은 공유되는 모든 가중치입니다.

479
00:45:41,969 --> 00:45:43,359
또는 그들 모두는 모두 분리되어 있습니다.

480
00:45:43,359 --> 00:45:46,352
이 모든 레이어에는 별도의 가중치가 있습니다.

481
00:45:44,060 --> 00:45:53,036


482
00:45:46,352 --> 00:45:47,500
문제.

483
00:45:47,500 --> 00:45:50,917
[학생은 마이크에서 소리 쳤다]

484
00:45:53,036 --> 00:45:55,171


485
00:45:55,171 --> 00:46:07,411


486
00:45:57,594 --> 00:45:59,273
- 그렇습니다. 그렇다면 왜 우리는

487
00:45:59,273 --> 00:46:00,953
이전 레이어에 그라디언트를 주입하려면 어떻게해야합니까?

488
00:46:00,953 --> 00:46:04,703
결국 우리의 분류 결과는 결국,

489
00:46:06,517 --> 00:46:08,896
여기에 그라디언트가있는 곳은

490
00:46:07,411 --> 00:46:12,931


491
00:46:08,896 --> 00:46:10,409
체인 롤을 통해 다시 통과했다.

492
00:46:10,409 --> 00:46:12,824
그러나 문제는 당신이 매우 깊은
네트워크를 가지고있을 때입니다.

493
00:46:12,824 --> 00:46:15,282
그리고 너는이 모든 길로 돌아가고있다.

494
00:46:15,282 --> 00:46:18,916
이 기울기 신호 중 일부가 최소화 될 수 있습니다.

495
00:46:17,200 --> 00:46:22,266


496
00:46:18,916 --> 00:46:21,988
처음에 더 가깝게 잃어 버렸습니다.

497
00:46:21,988 --> 00:46:25,588
이전 부분의 이러한 추가 항목

498
00:46:22,266 --> 00:46:27,515


499
00:46:25,588 --> 00:46:29,187
추가 신호를 제공하는 데 도움이 될 수 있습니다.

500
00:46:29,187 --> 00:46:33,477
[학생이 마이크에서 엉망으로]

501
00:46:33,477 --> 00:46:35,486
- 그래서 질문은 당신이 항상
소품을 되 찾는가하는 것입니다.

502
00:46:35,486 --> 00:46:36,663
각 출력에 대해

503
00:46:36,663 --> 00:46:38,824
아니요. 단 한 개의 등 받침대가
끝까지 지나치지 않습니다.

504
00:46:36,910 --> 00:46:41,370


505
00:46:38,824 --> 00:46:42,256
당신은이 세 가지를 생각할 수 있습니다.

506
00:46:42,256 --> 00:46:44,790
너는 그런 종류의 존재라고 생각할 수있다.

507
00:46:42,784 --> 00:46:46,446


508
00:46:44,790 --> 00:46:46,754
네가 할 일이 있다면 끝까지 추가해라.

509
00:46:46,754 --> 00:46:48,885
계산 그래프를 작성하면

510
00:46:48,885 --> 00:46:52,364
최종 신호 및 이러한 모든 걸 취할 수 있습니다.

511
00:46:51,168 --> 00:46:55,850


512
00:46:52,364 --> 00:46:54,814
그라디언트를 사용하여 다시 모든 것을 통과시켜줍니다.

513
00:46:54,814 --> 00:46:57,719
마치 마지막에 함께 추가 된 것 같습니다.

514
00:46:55,850 --> 00:46:58,010


515
00:46:57,719 --> 00:46:59,780
전산 그래프에서.

516
00:46:58,010 --> 00:47:04,111


517
00:46:59,780 --> 00:47:02,066
우리가 아직 가지고 있기 때문에
시간의 이익을 위해서 그렇습니다.

518
00:47:02,066 --> 00:47:06,233
통과하기에 많은, 오프라인에서
다른 질문을 할 수 있습니다.

519
00:47:04,111 --> 00:47:11,911


520
00:47:08,163 --> 00:47:11,330
좋아, GoogleNet 기본적으로 22 레이어.

521
00:47:12,251 --> 00:47:14,627
그것은 효율적인 시작 모듈을 가지고 있으며,

522
00:47:14,627 --> 00:47:16,793
완전히 연결된 레이어가 없습니다.

523
00:47:16,793 --> 00:47:18,919
AlexNet보다 12 배 적은 매개 변수,

524
00:47:18,919 --> 00:47:22,836
ILSVRC 2014 분류 수상자입니다.

525
00:47:23,349 --> 00:47:26,841


526
00:47:26,038 --> 00:47:28,775
이제 2015 년 우승자를 살펴 보겠습니다.

527
00:47:26,841 --> 00:47:30,315


528
00:47:28,775 --> 00:47:31,679
ResNet 네트워크이므로 여기에서

529
00:47:30,315 --> 00:47:36,426


530
00:47:31,679 --> 00:47:35,964
이 아이디어는 정말로 깊음 그물의 혁명입니다.

531
00:47:35,964 --> 00:47:39,149
2014 년에 우리는 심도를 높이기 시작했습니다.

532
00:47:36,426 --> 00:47:41,866


533
00:47:39,149 --> 00:47:43,477
152 개의 레이어에서이 엄청나게 깊은 모델을 가졌습니다.

534
00:47:41,866 --> 00:47:48,503


535
00:47:43,477 --> 00:47:46,426
ResNet 아키텍처였습니다.

536
00:47:46,426 --> 00:47:49,656
이제 좀 더 자세하게 살펴 보겠습니다.

537
00:47:48,503 --> 00:47:52,460


538
00:47:49,656 --> 00:47:52,521
그래서 ResNet 아키텍처는 극도로 발전하고 있습니다.

539
00:47:52,521 --> 00:47:55,096
다른 네트워크보다 훨씬 더 깊은 네트워크

540
00:47:55,096 --> 00:47:58,534
전에이 아이디어를 사용하여 이것을하고있다.

541
00:47:58,534 --> 00:48:01,289
우리가 이야기 할 잔여 연결의.

542
00:48:01,289 --> 00:48:04,968
그래서 그들은 ImageNet을위한
152 레이어 모델을 가지고있었습니다.

543
00:48:02,806 --> 00:48:07,704


544
00:48:04,968 --> 00:48:08,779
그들은 이것에 7 % 정상 5
과실의 3.5를 얻을 수있었습니다

545
00:48:07,704 --> 00:48:10,958


546
00:48:08,779 --> 00:48:11,927
정말로 특별한 것은 그들이 휩쓸었던 것입니다.

547
00:48:11,927 --> 00:48:15,004
모든 분류 및 탐지 경연 대회는

548
00:48:15,004 --> 00:48:17,862
ImageNet 마트 벤치 마크 및이 다른 벤치 마크

549
00:48:17,862 --> 00:48:18,924
코코.

550
00:48:18,924 --> 00:48:20,189
그것은 기본적으로 모든 것을 얻었습니다.

551
00:48:20,189 --> 00:48:24,356
그래서 다른 모든 것보다 분명히 좋았습니다.

552
00:48:22,797 --> 00:48:28,523


553
00:48:25,865 --> 00:48:29,258
그리고 이제는 조금의 동기 부여로 들어가 봅시다.

554
00:48:29,258 --> 00:48:31,869
ResNet과 잔여 연결 뒤에

555
00:48:29,797 --> 00:48:31,270


556
00:48:31,869 --> 00:48:33,348
우리가 얘기 할게.

557
00:48:33,348 --> 00:48:36,504
그리고 그들이 대답하려고 시도하면서 시작한 질문

558
00:48:36,504 --> 00:48:39,769
우리가 더 깊고 깊게 쌓아 올릴 때 일어나는 일입니다.

559
00:48:39,769 --> 00:48:42,749
일반 convolutional 신경 네트워크에 레이어?

560
00:48:41,717 --> 00:48:45,525


561
00:48:42,749 --> 00:48:44,584
그래서 우리가 VGG와 같은 것을 가져 가면

562
00:48:44,584 --> 00:48:47,937
또는 conv의 스택 인 일반 네트워크 및

563
00:48:45,525 --> 00:48:48,409


564
00:48:47,937 --> 00:48:50,517
서로 겹치는 수영장 층은 우리가 계속해서

565
00:48:48,409 --> 00:48:54,607


566
00:48:50,517 --> 00:48:54,684
이것들을 확장하고, 더 깊은 층을
얻고, 더 잘할 수 있을까요?

567
00:48:54,607 --> 00:49:01,635


568
00:48:56,411 --> 00:48:59,231
그리고 대답은 '아니오'입니다.

569
00:48:59,231 --> 00:49:00,832
그래서 만약에 당신이 그렇게한다면 어떤 일이 일어날지를보십시오.

570
00:49:00,832 --> 00:49:03,242
당신이 더 깊어 질 때, 여기 나는 20 층

571
00:49:01,635 --> 00:49:06,149


572
00:49:03,242 --> 00:49:07,409
네트워크와 56 레이어 네트워크를 지원합니다.

573
00:49:06,149 --> 00:49:14,186


574
00:49:10,308 --> 00:49:12,718
네트워크의 종류 당신은 여기에
테스트 오류에서 볼 수 있습니다

575
00:49:12,718 --> 00:49:15,864
오른쪽에서 56 층 네트워크가 더 나 빠지고 있습니다.

576
00:49:14,186 --> 00:49:21,276


577
00:49:15,864 --> 00:49:17,627
28 층 네트워크보다

578
00:49:17,627 --> 00:49:20,581
그래서 더 깊은 네트워크는 더 잘할 수 없었습니다.

579
00:49:20,581 --> 00:49:23,748
하지만 그때 정말 이상한 일은 지금입니다.

580
00:49:22,230 --> 00:49:26,829


581
00:49:24,639 --> 00:49:27,178
당신이 훈련 오류를 오른쪽으로 보면

582
00:49:27,178 --> 00:49:28,778
우리는 여기서 다시 20 계층 네트워크

583
00:49:28,778 --> 00:49:30,490
및 56 계층 네트워크.

584
00:49:30,490 --> 00:49:33,927
56 층 네트워크, 당신이
생각하는 분명한 문제 중 하나는,

585
00:49:32,563 --> 00:49:39,727


586
00:49:33,927 --> 00:49:38,094
나는 정말 깊은 네트워크를 가지고 있고,
나는 많은 매개 변수를 가지고있다.

587
00:49:39,117 --> 00:49:42,104
어쩌면 아마도 어느 시점에 맞지 않을 수 있습니다.

588
00:49:39,727 --> 00:49:46,291


589
00:49:42,104 --> 00:49:44,682
그러나 실제로 일어나는 것은 당신이 피팅을 끝내면

590
00:49:44,682 --> 00:49:46,276
당신은 아주 좋은 것을 기대할 것입니다.

591
00:49:46,276 --> 00:49:49,795
매우 낮은 훈련 오류율, 그리고 단지 나쁜 시험 오류,

592
00:49:48,599 --> 00:49:54,530


593
00:49:49,795 --> 00:49:51,995
그러나 여기에서 일어나는 것은 훈련 오류에서의 것입니다.

594
00:49:51,995 --> 00:49:54,571
56 층 네트워크 역시

595
00:49:54,571 --> 00:49:56,321
20 층 네트워크.

596
00:49:57,643 --> 00:49:59,438
그리고 더 깊은 모델이 더 나 빠지더라도,

597
00:49:59,438 --> 00:50:02,355
이는 과도한 피팅으로 인한 것이 아닙니다.

598
00:50:00,715 --> 00:50:07,423


599
00:50:04,272 --> 00:50:07,957
그리고 ResNet 제작자의 가설

600
00:50:07,957 --> 00:50:11,063
실제로 문제는 최적화 문제입니다.

601
00:50:09,123 --> 00:50:11,112


602
00:50:11,063 --> 00:50:14,171
더 깊은 모델은 최적화하기가 더 어렵습니다.

603
00:50:14,171 --> 00:50:16,421
더 얕은 네트워크보다

604
00:50:15,874 --> 00:50:21,072


605
00:50:17,645 --> 00:50:19,317
그리고 그 추론은 잘,

606
00:50:19,317 --> 00:50:21,489
더 깊은 모델은 적어도 수행 할 수 있어야합니다.

607
00:50:21,489 --> 00:50:24,073
더 얕은 모델 일 수 있습니다.

608
00:50:24,073 --> 00:50:26,238
당신은 건설을 통해 실제로 해결책을 가질 수 있습니다.

609
00:50:26,238 --> 00:50:28,645
여기서 학습 한 레이어를 가져갈 수 있습니다.

610
00:50:28,645 --> 00:50:30,486
너의 얕은 모델에서

611
00:50:30,486 --> 00:50:33,140
이들을 복사 한 다음 나머지 추가로 복사하십시오.

612
00:50:33,140 --> 00:50:36,002
더 깊은 계층에서는 ID 매핑을 추가하기 만하면됩니다.

613
00:50:36,002 --> 00:50:38,902
그래서 이것은 단지 잘 작동해야합니다.

614
00:50:37,613 --> 00:50:44,193


615
00:50:38,902 --> 00:50:40,343
더 얕은 층으로.

616
00:50:40,343 --> 00:50:43,087
그리고 제대로 배울 수 없었던 당신의 모델,

617
00:50:43,087 --> 00:50:47,105
최소한 이것을 배울 수 있어야합니다.

618
00:50:44,193 --> 00:50:51,533


619
00:50:47,105 --> 00:50:50,688
그리고 이것에 의해 그렇게 동기 부여 된 해결책은

620
00:50:52,418 --> 00:50:56,994
어떻게하면 우리 아키텍처를 어떻게
더 쉽게 만들 수 있을까요?

621
00:50:55,933 --> 00:50:59,979


622
00:50:56,994 --> 00:50:59,896
우리의 모델은 이러한 종류의 솔루션을 배우고,

623
00:50:59,896 --> 00:51:01,404
또는 적어도 이것과 같은 무엇인가?

624
00:51:01,404 --> 00:51:06,303
그래서 그들의 생각은 스태킹 대신에 잘됩니다.

625
00:51:03,512 --> 00:51:08,034


626
00:51:06,303 --> 00:51:08,675
이 모든 층들은 서로 겹쳐지며

627
00:51:08,675 --> 00:51:12,604
모든 계층에서 기본 매핑을 시도하고 배우십시오.

628
00:51:10,290 --> 00:51:16,671


629
00:51:12,604 --> 00:51:17,564
대신에 원하는 블록을 가질 수 있습니다.

630
00:51:17,564 --> 00:51:20,472
우리가 잔여 매핑을 시도하고 적합하게 만들 때,

631
00:51:20,472 --> 00:51:22,518
직접 매핑 대신.

632
00:51:22,518 --> 00:51:24,863
그래서이 모양이이 오른쪽에 있습니다.

633
00:51:24,863 --> 00:51:29,030
이 블록에 대한 입력은 들어오는 입력 일뿐입니다.

634
00:51:26,397 --> 00:51:30,619


635
00:51:30,628 --> 00:51:34,795
그리고 여기서 우리는 우리 편을 여기에서 사용하려고합니다.

636
00:51:36,770 --> 00:51:44,093


637
00:51:38,148 --> 00:51:41,051
우리는 시도하고 맞추기 위해 레이어를 사용하려고합니다.

638
00:51:41,051 --> 00:51:44,218
X의 H에 대한 우리의 욕망의 일부 잔여 물,

639
00:51:44,093 --> 00:51:50,766


640
00:51:45,142 --> 00:51:49,309
X의 원하는 함수 H 대신에 X를 뺀 값.

641
00:51:50,260 --> 00:51:53,814
그리고 기본적으로이 블록의 끝에서 우리는

642
00:51:50,766 --> 00:52:01,457


643
00:51:53,814 --> 00:51:56,637
이 오른쪽의 단계 연결,이 루프,

644
00:51:56,637 --> 00:51:59,787
우리가 입력을 받아들이면 그냥 통과시킵니다.

645
00:51:59,787 --> 00:52:03,346
정체성으로, 그래서 우리는 무게 레이어가 없다면

646
00:52:01,457 --> 00:52:08,803


647
00:52:03,346 --> 00:52:05,102
그 사이에 정체성이 될 것입니다.

648
00:52:05,102 --> 00:52:08,051
출력과 같은 것이지만, 이제는

649
00:52:08,051 --> 00:52:10,955
우리의 추가 무게 레이어는 델타를 배우고,

650
00:52:08,803 --> 00:52:18,448


651
00:52:10,955 --> 00:52:13,372
우리 X의 일부 잔여 물.

652
00:52:14,877 --> 00:52:16,604
그리고 지금은 이것의 출력이 될 것입니다.

653
00:52:16,604 --> 00:52:19,937
우리의 원래 R X와 약간의 잔여 물

654
00:52:18,448 --> 00:52:24,072


655
00:52:20,895 --> 00:52:22,003
우리는 그것을 호출하려고합니다.

656
00:52:22,003 --> 00:52:25,312
기본적으로 델타이므로 아이디어는

657
00:52:24,072 --> 00:52:29,780


658
00:52:25,312 --> 00:52:29,238
이제는 출력이 쉬워야합니다. 예를 들어,

659
00:52:29,238 --> 00:52:32,238
동일성이 이상적인 경우,

660
00:52:29,780 --> 00:52:36,642


661
00:52:33,320 --> 00:52:37,078
X의 F의 모든 가중치를 스쿼시하기 만하면됩니다.

662
00:52:37,078 --> 00:52:40,059
우리 체중 레이어에서 모든 제로로 설정

663
00:52:37,777 --> 00:52:41,944


664
00:52:40,059 --> 00:52:42,308
예를 들어, 우리는 정체성을 얻고 자합니다.

665
00:52:42,308 --> 00:52:44,319
출력으로, 우리는 뭔가를 얻을 수 있습니다,

666
00:52:44,319 --> 00:52:47,831
예를 들어,이 솔루션에 가까운 건설

667
00:52:47,831 --> 00:52:49,388
우리가 전에 가지고 있었던.

668
00:52:49,388 --> 00:52:51,314
맞아, 이것은 단지 네트워크 아키텍처 일뿐입니다.

669
00:52:51,314 --> 00:52:53,448
알았어, 이걸 시도해 보자.

670
00:52:53,448 --> 00:52:57,574
우리의 체중 레이어가 어떻게 잔류하는지
배우고, 무언가가 되십시오.

671
00:52:53,910 --> 00:53:01,245


672
00:52:57,574 --> 00:53:01,772
닫기를하면 X에 가까울 가능성이 커집니다.

673
00:53:01,772 --> 00:53:04,151
그것은 정확히 X를 수정하는 것입니다.

674
00:53:04,151 --> 00:53:06,198
무엇이 있어야하는지에 대한이 전체 맵핑.

675
00:53:06,198 --> 00:53:09,059
좋아, 이것에 대해 질문이 있으십니까?

676
00:53:07,127 --> 00:53:10,165


677
00:53:09,059 --> 00:53:09,999
[학생은 마이크에서 소리 쳤다]

678
00:53:09,999 --> 00:53:13,499
- 문제는 같은 차원입니까?

679
00:53:14,580 --> 00:53:18,413
그렇습니다.이 두 경로는 같은 차원입니다.

680
00:53:15,980 --> 00:53:22,672


681
00:53:19,562 --> 00:53:22,383
일반적으로 그것은 동일한 차원이거나,

682
00:53:22,383 --> 00:53:24,666
또는 그들이 실제로하는 것은 그들이

683
00:53:22,672 --> 00:53:27,785


684
00:53:24,666 --> 00:53:27,571
투영 및 바로 가기 및 다른 방법이 있습니다.

685
00:53:27,571 --> 00:53:31,790
같은 치수로 작동하도록 패딩 처리

686
00:53:27,785 --> 00:53:33,034


687
00:53:31,790 --> 00:53:33,098
깊이 현명한.

688
00:53:33,098 --> 00:53:34,205
예

689
00:53:34,205 --> 00:53:35,763
- [학생] 잔차라는 단어를 사용하면

690
00:53:35,763 --> 00:53:39,930
너는 마이크에 대해 이야기하고 있었다.

691
00:53:43,709 --> 00:53:47,637


692
00:53:46,667 --> 00:53:49,407
- 그래서 질문은 정확히 우리가 의미하는 바입니다.

693
00:53:47,637 --> 00:53:50,818


694
00:53:49,407 --> 00:53:52,968
이 변환 결과의 잔차

695
00:53:52,968 --> 00:53:54,448
잔여 물입니까?

696
00:53:54,448 --> 00:53:58,419
따라서 우리는 X의 F만큼이나 우리의
결과를 여기에서 생각할 수 있습니다.

697
00:53:55,278 --> 00:54:03,460


698
00:53:58,419 --> 00:54:02,709
더하기 X, 여기서 X의 F는 변환의 결과입니다.

699
00:54:02,709 --> 00:54:06,346
그리고 나서 X는 우리의 입력입니다.

700
00:54:03,460 --> 00:54:12,744


701
00:54:06,346 --> 00:54:07,460
정체성에 의해.

702
00:54:07,460 --> 00:54:10,605
그래서 평범한 레이어를 사용하고 싶습니다.

703
00:54:10,605 --> 00:54:12,854
우리가하려는 것은 뭔가를 배우는 것입니다.

704
00:54:12,854 --> 00:54:16,287
X의 H와 비슷하지만 이전에
보았던 것은 어렵다는 것입니다.

705
00:54:14,007 --> 00:54:17,246


706
00:54:16,287 --> 00:54:18,008
X의 H를 배우기.

707
00:54:18,008 --> 00:54:21,481
우리가 매우 깊은 네트워크를 갖게되면 X의 좋은 H입니다.

708
00:54:18,972 --> 00:54:22,387


709
00:54:21,481 --> 00:54:23,771
그래서 여기 아이디어는 시도하고
그것을 무너 뜨리는 것입니다.

710
00:54:22,387 --> 00:54:28,457


711
00:54:23,771 --> 00:54:27,301
X의 H가 X의 F와 같지 않고 대신에,

712
00:54:27,301 --> 00:54:30,248
그리고 X의 F를 배우려고하자.

713
00:54:28,457 --> 00:54:34,459


714
00:54:30,248 --> 00:54:33,648
그래서 직접적으로이 H의 X를 배우는 대신

715
00:54:33,648 --> 00:54:36,341
우리는 단지 우리가 추가해야 할
것이 무엇인지 배우고 싶습니다.

716
00:54:36,341 --> 00:54:40,551
또는 다음 단계로 넘어갈 때 입력 값을 뺍니다.

717
00:54:40,551 --> 00:54:44,160
따라서 여러분은 이것을이 입력을
수정하는 것으로 생각할 수 있습니다.

718
00:54:44,160 --> 00:54:45,469
의미에서 그 자리에.

719
00:54:45,469 --> 00:54:46,699
우리는 -

720
00:54:46,699 --> 00:54:49,931
[학생이 중얼 거려서 마이크에 중얼 거림]

721
00:54:47,461 --> 00:54:54,073


722
00:54:49,931 --> 00:54:51,654
- 문제는 우리가 잔차라는 말을 할 때입니다.

723
00:54:51,654 --> 00:54:53,248
우리는 F of X에 대해 이야기하고 있습니까?

724
00:54:53,248 --> 00:54:54,357
네.

725
00:54:54,357 --> 00:54:56,522
따라서 X의 F는 우리가 잔차라고 부르는 것입니다.

726
00:54:56,522 --> 00:54:58,939
그리고 그 의미가 있습니다.

727
00:54:59,683 --> 00:55:05,251


728
00:55:02,287 --> 00:55:04,751
네, 또 다른 질문입니다.

729
00:55:04,751 --> 00:55:08,251
[학생이 마이크에서 엉망으로]

730
00:55:05,251 --> 00:55:11,528


731
00:55:12,129 --> 00:55:14,334
- 문제는 실제적으로 우리가 합계하는 것입니다.

732
00:55:14,334 --> 00:55:17,480
X와 X의 F를 함께 사용하거나, 가중치를 배웁니다.

733
00:55:17,480 --> 00:55:20,955
조합을 선택하면 직접 합계를 계산할 수 있습니다.

734
00:55:18,137 --> 00:55:23,353


735
00:55:20,955 --> 00:55:23,599
왜냐하면 당신이 직접 합계를 할 때,

736
00:55:23,599 --> 00:55:26,869
이것은 내가 무엇인지 알게하는 아이디어입니다.

737
00:55:26,869 --> 00:55:29,619
나는 X에 더하거나 뺄 필요가있다.

738
00:55:27,132 --> 00:55:32,152


739
00:55:31,462 --> 00:55:35,273
이 모든 것이 주된 직관입니까?

740
00:55:32,152 --> 00:55:37,058


741
00:55:35,273 --> 00:55:36,171
문제.

742
00:55:36,171 --> 00:55:39,588
[학생은 마이크에서 소리 쳤다]

743
00:55:37,058 --> 00:55:40,630


744
00:55:41,531 --> 00:55:43,865
- 그래, 왜 그게 문제인지 분명하지 않다.

745
00:55:43,865 --> 00:55:45,823
잔류 물을 배우는 것이 더 쉬워야한다고

746
00:55:45,823 --> 00:55:47,909
직접 매핑을 배우는 것보다?

747
00:55:47,909 --> 00:55:50,609
그리고 이것은 단지 그들의 가설입니다.

748
00:55:48,303 --> 00:55:54,433


749
00:55:50,609 --> 00:55:55,181
가설은 우리가 잔차를 배우면

750
00:55:55,181 --> 00:55:59,557
X에 대한 델타가 무엇인지 배워야합니다.

751
00:55:59,557 --> 00:56:02,947
우리의 가설이 일반적으로

752
00:56:00,654 --> 00:56:05,214


753
00:56:02,947 --> 00:56:07,169
심지어 우리의 솔루션과 같은 건설,

754
00:56:05,214 --> 00:56:09,097


755
00:56:07,169 --> 00:56:10,690
우리는 몇몇 얕은 층들을 가지고있었습니다.

756
00:56:09,097 --> 00:56:14,246


757
00:56:10,690 --> 00:56:13,718
우리는이 모든 신원 매핑을 배웠습니다.

758
00:56:13,718 --> 00:56:16,911
상단에 이것이 있어야했던 해결책이었습니다.

759
00:56:14,246 --> 00:56:23,349


760
00:56:16,911 --> 00:56:20,219
좋은, 그리고 그래서 그것은 아마
많은 이들 층을 암시합니다.

761
00:56:20,219 --> 00:56:23,157
실제로 정체성에 가까운 것,

762
00:56:23,157 --> 00:56:24,795
좋은 층이 될 것입니다.

763
00:56:24,795 --> 00:56:27,092
그래서 그것 때문에, 우리는 이것을 공식화합니다.

764
00:56:27,092 --> 00:56:30,168
정체성을 배울 수있는 것으로서

765
00:56:30,168 --> 00:56:31,764
약간의 델타 플러스.

766
00:56:31,764 --> 00:56:35,125
정말로 정체성이 가장 좋은 경우

767
00:56:35,125 --> 00:56:37,573
F는 X 스쿼시 변환을 0으로 만듭니다.

768
00:56:37,573 --> 00:56:39,662
상대적으로,

769
00:56:39,662 --> 00:56:41,173
배우기가 더 쉬워 보일 수도 있지만,

770
00:56:41,173 --> 00:56:43,509
또한 우리는 가까운 것을 얻을 수 있습니다.

771
00:56:43,509 --> 00:56:45,594
신원 매핑.

772
00:56:44,436 --> 00:56:49,816


773
00:56:45,594 --> 00:56:47,927
그리고 다시 이것은 반드시 필연적 인 것이 아닙니다.

774
00:56:47,927 --> 00:56:51,776
입증 된 것 또는 무엇 이건
그것은 직관과 가설 일뿐입니다.

775
00:56:49,816 --> 00:56:55,214


776
00:56:51,776 --> 00:56:54,848
그리고 나서 우리는 나중에 사람들이

777
00:56:54,848 --> 00:56:56,533
실제로 이것에 도전하고 오 말할 수 있습니다.

778
00:56:55,214 --> 00:56:59,054


779
00:56:56,533 --> 00:56:59,518
그것은 실제로 필요한 잔차가 아니며,

780
00:56:59,518 --> 00:57:03,069
그러나 적어도 이것은이 논문의 가설이며,

781
00:57:03,069 --> 00:57:06,105
실제로이 모델을 사용하여,

782
00:57:04,021 --> 00:57:07,273


783
00:57:06,105 --> 00:57:08,317
그것은 아주 잘 할 수있었습니다.

784
00:57:07,273 --> 00:57:12,749


785
00:57:08,317 --> 00:57:09,620
문제.

786
00:57:09,620 --> 00:57:13,037
[학생은 마이크에서 소리 쳤다]

787
00:57:12,749 --> 00:57:17,017


788
00:57:17,017 --> 00:57:23,000


789
00:57:23,000 --> 00:57:28,771


790
00:57:28,771 --> 00:57:31,115


791
00:57:31,115 --> 00:57:39,810


792
00:57:39,810 --> 00:57:44,714


793
00:57:42,623 --> 00:57:45,394
- 그렇습니다. 그래서 사람들은
다른 방법을 시도해 보았습니다.

794
00:57:45,394 --> 00:57:49,938
이전 레이어의 입력 및 예

795
00:57:49,938 --> 00:57:52,556
그래서 이것은 기본적으로 매우 활발한 연구 분야입니다.

796
00:57:52,556 --> 00:57:55,018
어떻게 우리가이 모든 연결을 공식화하는지,

797
00:57:55,018 --> 00:57:57,557
그리고이 모든 구조에서 무엇이 연결되어 있는지

798
00:57:57,557 --> 00:58:00,174
그래서 우리는 다른 네트워크의 몇
가지 예를 보게 될 것입니다.

799
00:58:00,174 --> 00:58:04,505
잠시 후에 아키텍처가 활성화되지만
이는 활성화 된 영역입니다.

800
00:58:01,043 --> 00:58:07,051


801
00:58:04,505 --> 00:58:05,505
연구.

802
00:58:06,468 --> 00:58:10,245
좋습니다. 그래서 우리는 기본적으로
모든 잔차 블록을 가지고 있습니다.

803
00:58:07,051 --> 00:58:11,672


804
00:58:10,245 --> 00:58:12,903
서로 위에 쌓인

805
00:58:11,672 --> 00:58:17,257


806
00:58:12,903 --> 00:58:15,598
우리는 완전한 상주 아키텍처를 볼 수 있습니다.

807
00:58:15,598 --> 00:58:18,750
이 나머지 블록들 각각은 두 개씩 세 개씩 있습니다.

808
00:58:17,257 --> 00:58:26,466


809
00:58:18,750 --> 00:58:23,285
레이어를이 블록의 일부로 사용하면 작업이 완료됩니다.

810
00:58:23,285 --> 00:58:26,479
이것이 단지 좋은 구성이라고 말하는 것입니다.

811
00:58:26,479 --> 00:58:28,109
잘 작동합니다.

812
00:58:28,109 --> 00:58:30,638
우리는이 모든 블록들을 매우 깊이 쌓아 놓습니다.

813
00:58:30,638 --> 00:58:34,161
이 아주 깊은 건축물과 같은 또 다른 것

814
00:58:31,594 --> 00:58:35,817


815
00:58:34,161 --> 00:58:37,911
그것은 기본적으로 최대 150
개의 레이어를 가능하게합니다.

816
00:58:35,817 --> 00:58:38,129


817
00:58:38,129 --> 00:58:42,233


818
00:58:42,231 --> 00:58:45,981
이것의 깊이, 그리고 우리가하는
일은 우리가 쌓는 것입니다.

819
00:58:47,392 --> 00:58:49,725
이 모든 것들과 주기적으로 우리는 또한 두 배

820
00:58:49,725 --> 00:58:52,042
필터 수 및 공간적으로 샘플 다운

821
00:58:52,042 --> 00:58:54,792
우리가 그렇게 할 때 보폭 2를 사용합니다.

822
00:58:54,676 --> 00:59:01,817


823
00:58:56,666 --> 00:58:59,319
그리고 나서 우리는이 추가적인 [벙어리]

824
00:58:59,319 --> 00:59:02,835
우리 네트워크의 맨 처음에

825
00:59:01,817 --> 00:59:11,166


826
00:59:02,835 --> 00:59:03,668
그리고 결국 우리는 또한 듣습니다.

827
00:59:03,668 --> 00:59:04,677
완전히 연결된 레이어가 없다.

828
00:59:04,677 --> 00:59:06,844
전역 평균 풀링 레이어가 있습니다.

829
00:59:06,844 --> 00:59:09,451
그것은 공간적으로 모든 것을 평균 할 것입니다.

830
00:59:09,451 --> 00:59:13,618
마지막 1000 방법 분류에 입력하십시오.

831
00:59:11,166 --> 00:59:18,873


832
00:59:15,504 --> 00:59:17,801
이것이 전체 ResNet 아키텍처입니다.

833
00:59:17,801 --> 00:59:20,333
그리고 그것은 매우 단순하고 우아합니다.

834
00:59:18,873 --> 00:59:27,273


835
00:59:20,333 --> 00:59:22,745
이 모든 ResNet 블록은 서로의 위에 있습니다.

836
00:59:22,745 --> 00:59:27,032
그들은 총 깊이가 34, 50, 100,

837
00:59:27,032 --> 00:59:30,199
ImageNet에 대해 최대 152 개를 시도했습니다.

838
00:59:27,273 --> 00:59:33,221


839
00:59:33,221 --> 00:59:40,208


840
00:59:35,040 --> 00:59:39,369
좋아, 한 가지 더 알고 싶은 것은

841
00:59:39,369 --> 00:59:41,869
매우 깊은 네트워크의 경우, 더 많은 네트워크

842
00:59:40,208 --> 00:59:44,458


843
00:59:41,869 --> 00:59:44,774
깊이가 50 이상인 경우 병목 현상 레이어도 사용합니다.

844
00:59:44,774 --> 00:59:47,473
효율성을 높이기 위해 GoogleNet이
수행 한 것과 유사합니다.

845
00:59:47,473 --> 00:59:51,865
이제 각 블록 내에서 당신은 가고 있습니다.

846
00:59:51,865 --> 00:59:54,645
그들이 한 일은 하나의 전환 필터 (conv filter)

847
00:59:52,233 --> 00:59:58,409


848
00:59:54,645 --> 00:59:58,005
그것을 먼저 더 작은 깊이로 투영합니다.

849
00:59:58,005 --> 01:00:01,774
그래서 다시 우리가보고 있다면 28
시까 지 28 살이라고합시다.

850
00:59:58,409 --> 01:00:04,161


851
01:00:01,774 --> 01:00:05,087
256 임플란트로, 우리는 이것을 하나씩 처리합니다.

852
01:00:05,087 --> 01:00:06,926
그것은 깊이를 투사하고있다.

853
01:00:05,583 --> 01:00:07,587


854
01:00:06,926 --> 01:00:08,759
우리는 28에 의해 28만큼 64를 얻습니다.

855
01:00:07,587 --> 01:00:11,521


856
01:00:09,917 --> 01:00:12,220
이제 당신의 회선은 3 대 3의 conv,

857
01:00:12,220 --> 01:00:15,809
여기에 그들은 오직 하나만 가지고
있으며, 이것 이상으로 작동합니다.

858
01:00:14,268 --> 01:00:18,759


859
01:00:15,809 --> 01:00:19,296
축소 된 단계로 인해 비용이 적게 듭니다.

860
01:00:19,296 --> 01:00:21,881
그리고 나서 그들은 다른

861
01:00:21,881 --> 01:00:24,621
깊이있는 백업 프로젝트

862
01:00:24,621 --> 01:00:28,180
~ 256, 실제 블록입니다.

863
01:00:27,094 --> 01:00:33,600


864
01:00:28,180 --> 01:00:30,680
더 깊은 네트워크에서 보게 될 것입니다.

865
01:00:33,831 --> 01:00:38,618
따라서 실제로 ResNet은 일괄 정규화를 사용합니다.

866
01:00:38,618 --> 01:00:42,092
모든 전환 레이어 후에는 Xavier 초기화를 사용합니다.

867
01:00:42,092 --> 01:00:46,259
그들이 도움을 주었던 여분의 스케일링 요소

868
01:00:45,907 --> 01:00:50,989


869
01:00:47,221 --> 01:00:51,388
SGD + 모멘텀으로 훈련 된 초기화를 향상시킵니다.

870
01:00:50,989 --> 01:00:54,761


871
01:00:52,414 --> 01:00:54,622
그들의 학습 속도는 비슷한 학습 속도를 사용합니다.

872
01:00:54,622 --> 01:00:57,280
학습 속도를 떨어 뜨리는 일정 유형

873
01:00:57,280 --> 01:01:00,280
귀하의 유효성 오류가 평원 때.

874
01:01:02,561 --> 01:01:05,351
미니 배치 크기 256, 체중 감량 조금

875
01:01:05,351 --> 01:01:06,684
아무런 탈락도 없습니다.

876
01:01:08,455 --> 01:01:10,990
그리고 실험적으로 그들은 그들이

877
01:01:10,990 --> 01:01:12,710
이 매우 깊은 네트워크를 훈련 할 수 있었고,

878
01:01:12,710 --> 01:01:14,391
퇴화하지 않고.

879
01:01:13,280 --> 01:01:18,100


880
01:01:14,391 --> 01:01:17,582
그들은 기본적으로 좋은 그라디언트
흐름을 가질 수있었습니다.

881
01:01:17,582 --> 01:01:19,870
네트워크를 통해 모든 길로 되돌아옵니다.

882
01:01:18,100 --> 01:01:23,369


883
01:01:19,870 --> 01:01:23,435
그들은 ImageNet에서 최대 152 개의 레이어를 시도했으며,

884
01:01:23,435 --> 01:01:27,442
1200 Cifar에, 당신은 그것으로 놀았 어,

885
01:01:25,957 --> 01:01:33,011


886
01:01:27,442 --> 01:01:31,525
그러나 더 작은 데이터 세트 및
그들은 또한 지금 그것을 보았다.

887
01:01:32,804 --> 01:01:35,556
당신은 더 깊은 네트워크가 더
낮은 훈련을 이룰 수 있습니다.

888
01:01:33,011 --> 01:01:37,748


889
01:01:35,556 --> 01:01:37,113
예상대로 오류가 발생했습니다.

890
01:01:37,113 --> 01:01:40,228
그래서 당신은 똑같은 이상한 그림을 가지고 있지 않습니다.

891
01:01:37,748 --> 01:01:40,009


892
01:01:40,228 --> 01:01:43,841
우리가 이전에 본 행동

893
01:01:43,841 --> 01:01:45,353
잘못된 방향이었다.

894
01:01:45,353 --> 01:01:48,260
그래서 여기에서 그들은 1 위를 쓸어 버릴 수있었습니다.

895
01:01:47,214 --> 01:01:54,531


896
01:01:48,260 --> 01:01:50,344
모든 ILSVRC 대회에서,

897
01:01:50,344 --> 01:01:53,570
2015 년 모든 COCO 대회

898
01:01:53,570 --> 01:01:55,653
상당한 이윤으로

899
01:01:54,531 --> 01:01:59,670


900
01:01:56,962 --> 01:02:01,574
총 상위 5 개 오류는 분류에서 3.6 %였습니다

901
01:01:59,670 --> 01:02:06,051


902
01:02:01,574 --> 01:02:05,626
실제로 이것은 인간의 성능보다 낫습니다.

903
01:02:05,626 --> 01:02:07,459
ImageNet 논문에서.

904
01:02:06,051 --> 01:02:17,765


905
01:02:09,712 --> 01:02:12,864
또한 인간의 측정 기준이있었습니다.

906
01:02:12,864 --> 01:02:17,031
사실 우리 실험실 안드레 카파시가 썼다.

907
01:02:18,023 --> 01:02:21,940
일주일 내내 스스로 훈련하고 기본적으로

908
01:02:18,606 --> 01:02:22,531


909
01:02:23,127 --> 01:02:25,540
모두 다 했어.이 일을 혼자서 했어.

910
01:02:25,540 --> 01:02:29,341
그리고 나는 어딘가에 5-ish %를 생각했다.

911
01:02:26,291 --> 01:02:38,145


912
01:02:29,341 --> 01:02:31,584
그래서 저는 기본적으로 할 수있었습니다.

913
01:02:31,584 --> 01:02:35,001
적어도 인간보다.

914
01:02:36,985 --> 01:02:41,072
좋아요, 이것들은 주요 네트워크의 종류입니다.

915
01:02:38,145 --> 01:02:42,403


916
01:02:41,072 --> 01:02:42,879
최근에 사용 된

917
01:02:42,879 --> 01:02:45,211
우리는 처음에 AlexNet을 시작했고,

918
01:02:45,211 --> 01:02:48,814
VGG와 GoogleNet은 여전히 인기가 있지만,

919
01:02:48,814 --> 01:02:51,967
그러나 ResNet은 가장 최근에
가장 우수한 수행 모델입니다.

920
01:02:51,967 --> 01:02:56,100
새로운 네트워크를 훈련시키는 무언가를 찾고 있다면

921
01:02:52,259 --> 01:02:57,053


922
01:02:56,100 --> 01:02:57,695
ResNet을 사용할 수 있습니다.

923
01:02:57,695 --> 01:02:59,028
그것으로 작업.

924
01:03:00,964 --> 01:03:04,844
따라서이 중 일부를 더 빨리 살펴 보는 것이 더 좋습니다.

925
01:03:04,844 --> 01:03:07,213
복잡성에 대한 감각.

926
01:03:07,213 --> 01:03:09,098
여기에 우리는

927
01:03:09,098 --> 01:03:12,848
성능 그래서 이것이 여기에 최고 정확도입니다.

928
01:03:14,003 --> 01:03:16,085
그리고 더 높은 것이 좋습니다.

929
01:03:16,085 --> 01:03:17,887
그래서 우리는 이러한 모델을 많이 보게 될 것입니다.

930
01:03:17,887 --> 01:03:19,817
일부 다른 버전뿐만 아니라

931
01:03:19,817 --> 01:03:22,350
그 (것)들의 이렇게,이 GoogleNet 처음 것은,

932
01:03:22,350 --> 01:03:26,266
내 생각에 V2, V3 및 여기서는 최고라고 생각합니다.

933
01:03:26,266 --> 01:03:29,135
V4는 실제로 ResNet 더하기 시작입니다.

934
01:03:26,809 --> 01:03:33,039


935
01:03:29,135 --> 01:03:32,199
조합, 그래서 이들은 단지 종류의

936
01:03:32,199 --> 01:03:34,820
점진적이고 작은 변화

937
01:03:33,039 --> 01:03:37,230


938
01:03:34,820 --> 01:03:37,555
그 (것)들의 위에 건설 해, 이렇게 최상이다

939
01:03:37,555 --> 01:03:39,969
여기서 모델을 수행합니다.

940
01:03:39,969 --> 01:03:42,756
그리고 우리가 오른쪽을 보면, 그들의

941
01:03:42,756 --> 01:03:46,256
여기서 계산상의 복잡성은 정렬됩니다.

942
01:03:44,085 --> 01:03:54,530


943
01:03:48,496 --> 01:03:51,609
Y 축이 가장 정확합니다.

944
01:03:51,609 --> 01:03:53,123
그래서 더 높습니다.

945
01:03:53,123 --> 01:03:57,223
X 축은 사용자의 작업이므로 오른쪽으로 갈수록,

946
01:03:54,530 --> 01:04:03,445


947
01:03:57,223 --> 01:03:59,749
당신이하고있는 작전이 많을수록 더 계산적으로

948
01:03:59,749 --> 01:04:02,456
비싼 다음 큰 원,

949
01:04:02,456 --> 01:04:03,884
귀하의 서클은 귀하의 메모리 사용량,

950
01:04:03,884 --> 01:04:06,097
회색 원이 여기서 참조됩니다.

951
01:04:06,097 --> 01:04:08,061
그러나 원이 클수록 메모리 사용량이 많아집니다.

952
01:04:08,061 --> 01:04:11,824
그래서 여기서 우리는 VGG가
녹색의 것들임을 알 수 있습니다.

953
01:04:10,419 --> 01:04:20,131


954
01:04:11,824 --> 01:04:14,152
일종의 효율성이 가장 낮습니다.

955
01:04:14,152 --> 01:04:15,909
그들은 가장 큰 기억을 가지고 있으며,

956
01:04:15,909 --> 01:04:17,016
대부분의 작업,

957
01:04:17,016 --> 01:04:19,433
그러나 그들은 꽤 잘합니다.

958
01:04:20,648 --> 01:04:23,221
GoogleNet이 가장 효율적입니다.

959
01:04:23,221 --> 01:04:25,757
그것은 작전 측면에서 길이다.

960
01:04:25,757 --> 01:04:30,085
메모리 사용을위한 작은 작은 원이 있습니다.

961
01:04:28,931 --> 01:04:34,026


962
01:04:30,085 --> 01:04:34,059
이전 모델 인 AlexNet은 정확도가 가장 낮습니다.

963
01:04:34,059 --> 01:04:35,985
상대적으로 계산량이 적습니다.

964
01:04:35,985 --> 01:04:38,804
그것은 더 작은 네트워크이지만,
또한 특별히 그렇지 않습니다.

965
01:04:38,804 --> 01:04:40,221
메모리 효율적인.

966
01:04:39,571 --> 01:04:42,428


967
01:04:42,119 --> 01:04:47,026
그리고 ResNet 여기, 우리는
적당한 효율성을 가지고 있습니다.

968
01:04:42,428 --> 01:04:45,996


969
01:04:45,996 --> 01:04:55,450


970
01:04:47,026 --> 01:04:49,310
메모리의 측면에서 보면 중간에있는 것입니다.

971
01:04:49,310 --> 01:04:53,310
작업을 수행 할 수 있으며 정확도가 가장 높습니다.

972
01:04:55,450 --> 01:05:00,424


973
01:04:56,839 --> 01:04:58,838
여기에 몇 가지 추가 플롯도 있습니다.

974
01:04:58,838 --> 01:05:01,618
당신은 당신의 자신의 시간에 이것들을 더 볼 수 있습니다.

975
01:05:00,424 --> 01:05:07,759


976
01:05:01,618 --> 01:05:04,600
왼쪽의이 그림은 정방향 통과 시간을 보여줍니다.

977
01:05:04,600 --> 01:05:07,825
그래서 이것은 밀리 세컨드 (milliseconds)이며
맨 위에 올 수 있습니다.

978
01:05:07,825 --> 01:05:11,253
VGG 앞으로 약 200 밀리 초를 얻을 수 있습니다.

979
01:05:11,253 --> 01:05:13,466
이것으로 초당 5 프레임,

980
01:05:13,466 --> 01:05:15,678
이것은 순서대로 정렬됩니다.

981
01:05:15,678 --> 01:05:18,459
권력을 바라보고있는이 줄거리도있다.

982
01:05:18,459 --> 01:05:22,584
소비와 당신이 여기에서이 종이를 더 보는 경우에,

983
01:05:22,584 --> 01:05:25,693
이러한 종류의 계산에 대한 추가 분석이 있습니다.

984
01:05:25,693 --> 01:05:26,693
비교.

985
01:05:29,163 --> 01:05:38,624


986
01:05:31,414 --> 01:05:34,318
그래서 이것들은 여러분이해야 할 주요 아키텍처였습니다.

987
01:05:34,318 --> 01:05:36,776
정말로 깊이 알고 있고 익숙하다.

988
01:05:36,776 --> 01:05:39,560
적극적으로 사용하려고 생각하고 있습니다.

989
01:05:39,560 --> 01:05:41,278
하지만 이제는 간단히 살펴 보겠습니다.

990
01:05:41,278 --> 01:05:43,156
좋은 다른 아키텍쳐

991
01:05:43,156 --> 01:05:46,323
역사적 영감을 아는 것

992
01:05:45,070 --> 01:05:47,981


993
01:05:47,290 --> 01:05:50,040
또는 최근 연구 분야.

994
01:05:47,981 --> 01:05:52,011


995
01:05:51,526 --> 01:05:53,569
첫 번째 네트워크 인 Network in Network,

996
01:05:52,011 --> 01:06:00,795


997
01:05:53,569 --> 01:05:57,152
이것은 2014 년 이후이며이 배경의 아이디어입니다.

998
01:06:01,339 --> 01:06:06,334
이 바닐라 길쌈 레이어가 있다는 것입니다.

999
01:06:06,334 --> 01:06:10,261
그러나 우리는 이것들을 가지고 있습니다. 이것은

1000
01:06:10,261 --> 01:06:13,493
그들이 마이크로 네트워크라고 부르는 MLP 전환 계층

1001
01:06:10,864 --> 01:06:14,337


1002
01:06:13,493 --> 01:06:15,497
또는 기본적으로 networth 내의 네트워크,

1003
01:06:14,337 --> 01:06:15,941


1004
01:06:15,497 --> 01:06:16,928
종이의 이름.

1005
01:06:16,928 --> 01:06:21,088
각 전환 레이어 내에서 MLP를 스택하려는 위치

1006
01:06:21,088 --> 01:06:23,962
맨 위에 두 개의 완전히 연결된 레이어가있는

1007
01:06:23,962 --> 01:06:26,293
표준 전환과 계산이 가능하다.

1008
01:06:26,293 --> 01:06:28,989
이 지역의 더 추상적 인 기능

1009
01:06:28,989 --> 01:06:29,977
패치가 맞아.

1010
01:06:29,977 --> 01:06:32,017
그래서 conv 필터를 미끄러지는 대신에,

1011
01:06:32,017 --> 01:06:36,153
그것은 약간 더 복잡한 계층 구조로 미끄러지고있다.

1012
01:06:36,153 --> 01:06:40,780
주변의 필터 세트를 사용하여

1013
01:06:36,818 --> 01:06:40,741


1014
01:06:40,780 --> 01:06:42,785
활성화지도.

1015
01:06:42,785 --> 01:06:46,092
그리고 이렇게, 이것은 완전히 연결된,

1016
01:06:46,092 --> 01:06:48,751
또는 기본적으로 하나의 전환 유형의 층으로 구성됩니다.

1017
01:06:48,751 --> 01:06:51,001
그것들을 모두 쌓아 올릴 것입니다.

1018
01:06:51,001 --> 01:06:53,701
우리가이 네트워크를 가지고있는 아래쪽 다이어그램

1019
01:06:52,523 --> 01:07:03,360


1020
01:06:53,701 --> 01:06:58,006
각 레이어에 쌓인 네트워크 내에서

1021
01:06:58,006 --> 01:07:01,475
그리고 이것을 알아야하는 주된 이유는

1022
01:07:01,475 --> 01:07:04,825
그것은 GoogleNet과 ResNet의 선구자였습니다.

1023
01:07:03,360 --> 01:07:05,527


1024
01:07:04,825 --> 01:07:08,584
병목 현상에 대한 아이디어가 담긴 2014 년

1025
01:07:06,713 --> 01:07:10,763


1026
01:07:08,584 --> 01:07:10,912
네가 거기에서 아주 많이 사용되는 것을 보았다.

1027
01:07:10,912 --> 01:07:13,828
그리고 그것은 또한 약간의 철학적 영감을주었습니다.

1028
01:07:13,828 --> 01:07:17,388
로컬 네트워크 유형학에 대한 GoogleNet의 아이디어

1029
01:07:17,388 --> 01:07:19,963
네트워크에서 사용 된 네트워크,

1030
01:07:19,963 --> 01:07:22,880
다른 종류의 구조.

1031
01:07:25,048 --> 01:07:29,422
이제 일련의 작품에 대해 이야기하겠습니다.

1032
01:07:26,436 --> 01:07:33,371


1033
01:07:29,422 --> 01:07:32,125
대부분 설치되어있는 ResNet
이후에 작동하거나 작동합니다.

1034
01:07:32,125 --> 01:07:34,655
resNet을 개선하기 위해

1035
01:07:33,371 --> 01:07:39,489


1036
01:07:34,655 --> 01:07:37,569
그 이후로 연구가 이루어졌습니다.

1037
01:07:37,569 --> 01:07:38,923
나는이 꽤 빨리 갈 것이다,

1038
01:07:38,923 --> 01:07:40,721
그래서 매우 높은 수준에 있습니다.

1039
01:07:39,489 --> 01:07:47,095


1040
01:07:40,721 --> 01:07:42,147
당신이 이것들에 관심이 있다면

1041
01:07:42,147 --> 01:07:45,564
논문을보고 자세한 내용을 알아보십시오.

1042
01:07:46,565 --> 01:07:50,686
그래서 ResNet의 저자는 잠시 후에

1043
01:07:47,095 --> 01:07:51,694


1044
01:07:50,686 --> 01:07:54,853
2016 년에는이 신문을 통해

1045
01:07:51,694 --> 01:07:55,782


1046
01:07:55,876 --> 01:07:57,552
ResNet 블록 설계.

1047
01:07:57,552 --> 01:08:01,327
그래서 그들은 기본적으로 레이어가 무엇인지 조정했습니다.

1048
01:08:01,327 --> 01:08:03,825
ResNet 블록 경로에 있던

1049
01:08:03,825 --> 01:08:07,299
이 새로운 구조가

1050
01:08:07,299 --> 01:08:11,024
정보 전달을위한보다 직접적인 경로

1051
01:08:11,024 --> 01:08:14,711
네트워크 전반에 걸쳐, 당신은 좋은 것을 원한다.

1052
01:08:13,517 --> 01:08:23,024


1053
01:08:14,711 --> 01:08:16,883
경로를 통해 모든 방법으로 정보를 전파하고,

1054
01:08:16,883 --> 01:08:19,671
그런 다음 다시 맨 아래로 백업하십시오.

1055
01:08:19,671 --> 01:08:22,244
그래서 그들은이 새로운 블록이 더
좋았다는 것을 보여주었습니다.

1056
01:08:22,245 --> 01:08:26,129
더 나은 성능을 제공 할 수있었습니다.

1057
01:08:24,100 --> 01:08:28,734


1058
01:08:26,129 --> 01:08:29,769
이 논문에서는 Wide
Residual 네트워크도 있습니다.

1059
01:08:28,734 --> 01:08:33,212


1060
01:08:29,769 --> 01:08:34,401
ResNets은 네트워크를 훨씬 더 깊게 만들었지 만

1061
01:08:33,212 --> 01:08:37,215


1062
01:08:34,401 --> 01:08:36,687
이러한 잔여 연결을 추가 할뿐만 아니라

1063
01:08:36,687 --> 01:08:40,206
그들의 주장은 잔차가 실제로 있다는 것입니다.

1064
01:08:37,215 --> 01:08:44,216


1065
01:08:40,206 --> 01:08:41,038
중요한 요인.

1066
01:08:41,038 --> 01:08:42,334
이 잔존물 구조를 가짐으로써,

1067
01:08:42,335 --> 01:08:46,100
반드시 아주 깊은 네트워크가있는 것은 아닙니다.

1068
01:08:44,216 --> 01:08:52,804


1069
01:08:46,100 --> 01:08:50,277
그래서 그들은 더 넓은 잔차 블록을 사용했습니다.

1070
01:08:50,277 --> 01:08:52,702
따라서 이것이 의미하는 바는 모든 필터가

1071
01:08:52,702 --> 01:08:53,604
전환 층.

1072
01:08:53,604 --> 01:08:56,806
따라서 레이어 당 F 필터를 사용하기 전에

1073
01:08:56,807 --> 01:09:00,118
그들은 K의 이러한 인자들을 사용하여 우물을 말했고,

1074
01:08:58,238 --> 01:09:06,722


1075
01:09:00,118 --> 01:09:03,472
모든 레이어 그것은 F times K 필터가 될 것입니다.

1076
01:09:03,473 --> 01:09:07,432
그래서이 넓은 층을 사용하여

1077
01:09:07,432 --> 01:09:09,812
그들의 50 층 너비의 ResNet이
out-perform 할 수있었습니다.

1078
01:09:07,737 --> 01:09:21,579


1079
01:09:09,812 --> 01:09:12,312
152 레이어 원래 ResNet,

1080
01:09:14,564 --> 01:09:17,099
그것은 또한 다음과 같은 추가적인 장점을 가지고있다.

1081
01:09:17,099 --> 01:09:21,513
동일한 금액으로도이 금액이 증가합니다.

1082
01:09:21,513 --> 01:09:23,845
매개 변수, 더 가슴의 계산 효율

1083
01:09:22,416 --> 01:09:32,277


1084
01:09:23,845 --> 01:09:26,587
이러한 작업을 병렬 처리 할 수 있기 때문에

1085
01:09:26,587 --> 01:09:27,732
더 쉽게.

1086
01:09:27,733 --> 01:09:31,143
더 많은 뉴런을 가진 바로 그 콘볼 루트

1087
01:09:31,143 --> 01:09:33,560
더 많은 커널에 퍼져있다.

1088
01:09:32,277 --> 01:09:37,357


1089
01:09:33,560 --> 01:09:36,430
보다 순차적 인 깊이와는 달리,

1090
01:09:36,430 --> 01:09:39,416
따라서 계산 효율이 향상됩니다.

1091
01:09:37,358 --> 01:09:41,694


1092
01:09:39,416 --> 01:09:40,356
너비.

1093
01:09:40,356 --> 01:09:42,104
그래서 여기에서이 작품이 시작되는 것을 볼 수 있습니다.

1094
01:09:42,104 --> 01:09:44,402
너비의 공헌을 이해하려고 노력하다.

1095
01:09:44,403 --> 01:09:47,550
깊이와 잔여 연결부,

1096
01:09:46,455 --> 01:09:51,952


1097
01:09:47,550 --> 01:09:50,627
한 쪽에서 다른 쪽에서 몇 가지 주장하기.

1098
01:09:50,627 --> 01:09:54,127
그리고이 다른 신문은 같은 시간에,

1099
01:09:51,952 --> 01:09:57,257


1100
01:09:55,874 --> 01:09:58,935
아마 조금 나중에, ResNeXt,

1101
01:09:57,257 --> 01:10:00,257


1102
01:09:58,935 --> 01:10:02,601
다시 이것은 ResNet의 제작자입니다.

1103
01:10:01,177 --> 01:10:07,612


1104
01:10:02,601 --> 01:10:05,193
계속해서 아키텍처를 추진하고 있습니다.

1105
01:10:05,193 --> 01:10:09,110
그리고 여기에도 그들은 괜찮은 생각이 들었습니다.

1106
01:10:07,612 --> 01:10:13,337


1107
01:10:10,509 --> 01:10:13,742
참으로이 폭 너비를 단지 대신에 더 많이 다루겠습니다.

1108
01:10:13,742 --> 01:10:15,829
이 잔여 블록의 너비를 늘린다.

1109
01:10:15,829 --> 01:10:19,386
더 많은 필터를 통해 그들은 구조를 가지고 있습니다.

1110
01:10:19,386 --> 01:10:23,335
그리고 각 나머지 블록 내에서, 다중 병렬

1111
01:10:21,694 --> 01:10:25,716


1112
01:10:23,335 --> 01:10:25,344
통로와 그들이 전화 할거야

1113
01:10:25,344 --> 01:10:27,225
이 경로의 총 수는 카디널리티입니다.

1114
01:10:25,716 --> 01:10:29,920


1115
01:10:27,225 --> 01:10:31,308
그래서 기본적으로 하나의 ResNet
블록을 사용하고 있습니다.

1116
01:10:29,920 --> 01:10:36,377


1117
01:10:33,386 --> 01:10:36,341
병목 현상이 있고 상대적으로 더 얇은 것은

1118
01:10:36,341 --> 01:10:39,205
그러나 이들 중 여러 개를 병렬로 수행해야합니다.

1119
01:10:39,205 --> 01:10:43,373
그리고 여기에도이 두 가지가 있다는 것을 알 수 있습니다.

1120
01:10:43,373 --> 01:10:45,262
광범위한 네트워크에 대한이 아이디어와의 관계,

1121
01:10:45,262 --> 01:10:50,097
또한 시작 모듈에 약간의 연결이있다.

1122
01:10:47,337 --> 01:10:56,856


1123
01:10:50,097 --> 01:10:52,461
우리가이 평행선을 가지고있는 곳에서도 말이죠.

1124
01:10:52,461 --> 01:10:54,833
이들 층은 병행하여 작동한다.

1125
01:10:54,833 --> 01:10:59,000
그리고 이제이 ResNeXt에는 그 취향이 있습니다.

1126
01:10:56,856 --> 01:10:58,732


1127
01:10:58,732 --> 01:11:05,714


1128
01:11:01,648 --> 01:11:05,653
ResNets을 개선하기위한 또 다른 접근법

1129
01:11:05,653 --> 01:11:09,445
확률 적 깊이라고 불리는이
아이디어가이 작업에서 나왔습니다.

1130
01:11:09,445 --> 01:11:12,557
동기 부여는 잘 보입니다.

1131
01:11:10,316 --> 01:11:14,887


1132
01:11:12,557 --> 01:11:14,688
이 깊이 문제에서.

1133
01:11:14,688 --> 01:11:18,855
일반적인 문제를 더 깊고 깊게 느끼면

1134
01:11:16,574 --> 01:11:23,678


1135
01:11:20,385 --> 01:11:22,347
당신은 사라지는 그라디언트를 가지고있을 것입니다.

1136
01:11:22,347 --> 01:11:26,874
당신은 할 수 없습니다. 당신의
그라디언트는 점점 작아 질 것입니다.

1137
01:11:23,678 --> 01:11:31,737


1138
01:11:26,874 --> 01:11:29,077
당신이 다시 전파하려고하는 동안 결국 사라집니다.

1139
01:11:29,077 --> 01:11:32,881
그것들은 매우 긴 레이어들 또는
많은 수의 레이어들 위에 있습니다.

1140
01:11:31,737 --> 01:11:43,594


1141
01:11:32,881 --> 01:11:36,003
그래서 그들의 동기가 무엇인지 잘 알고 자 노력합니다.

1142
01:11:36,003 --> 01:11:40,418
짧은 네트워크 동안 교육 및 그들은이 아이디어를 사용하여

1143
01:11:40,418 --> 01:11:43,855
트레이닝 중에 레이어의 하위 집합을 삭제합니다.

1144
01:11:43,855 --> 01:11:46,474
따라서 레이어의 하위 집합에 대해서는 그냥 사라집니다.

1145
01:11:46,474 --> 01:11:49,246
무게와 그들은 정체성 연결로 설정했습니다.

1146
01:11:49,246 --> 01:11:53,379
그리고 지금 당신이 얻는 것은이 짧은
네트워크를 가지고 있다는 것입니다.

1147
01:11:49,838 --> 01:11:55,094


1148
01:11:53,379 --> 01:11:55,425
교육을받는 동안

1149
01:11:55,425 --> 01:11:56,936
그라디언트가 더 좋습니다.

1150
01:11:56,936 --> 01:12:00,343
또한 조금 더 효율적입니다.

1151
01:12:00,343 --> 01:12:02,345
일종의 드롭 아웃 권리처럼.

1152
01:12:02,345 --> 01:12:04,884
그것은 전에 보았던 이런 종류의 향이 있습니다.

1153
01:12:03,076 --> 01:12:07,716


1154
01:12:04,884 --> 01:12:07,251
그리고 테스트 시간에 전체 깊은
네트워크를 사용하고자합니다.

1155
01:12:07,251 --> 01:12:08,918
너는 훈련을 받았다.

1156
01:12:07,716 --> 01:12:12,574


1157
01:12:11,256 --> 01:12:13,591
그래서 이들은 다음을 보는 작품들입니다.

1158
01:12:12,574 --> 01:12:19,214


1159
01:12:13,591 --> 01:12:15,640
상주 아키텍처, 다른 것을 이해하려고 시도하다.

1160
01:12:15,640 --> 01:12:19,848
ResNet 교육을 향상시키기 위해 노력하고 있습니다.

1161
01:12:19,848 --> 01:12:23,241
그래서 현재 진행중인 작품도 있습니다.

1162
01:12:23,241 --> 01:12:25,856
ResNet을 넘어서서,

1163
01:12:23,471 --> 01:12:30,596


1164
01:12:25,856 --> 01:12:30,116
어쩌면 더 잘 작동 할 수있는 ResNet 아키텍처,

1165
01:12:30,116 --> 01:12:33,063
또는 ResNets과 비슷하거나 더 낫습니다.

1166
01:12:30,596 --> 01:12:34,078


1167
01:12:33,063 --> 01:12:36,579
그리고 한 가지 아이디어는 FractalNet입니다.

1168
01:12:34,078 --> 01:12:39,854


1169
01:12:36,579 --> 01:12:39,282
꽤 최근에, 그리고 FractalNet의 논쟁

1170
01:12:39,282 --> 01:12:42,312
그 잔여 표현은 어쩌면

1171
01:12:39,854 --> 01:12:48,815


1172
01:12:42,312 --> 01:12:44,239
실제로는 필요하지 않으므로 다시 돌아갑니다.

1173
01:12:44,239 --> 01:12:46,083
우리가 이전에 말한 것에.

1174
01:12:46,083 --> 01:12:48,586
잔여 네트워크의 동기는 무엇입니까?

1175
01:12:48,586 --> 01:12:50,756
말하자면, 알다시피,

1176
01:12:48,815 --> 01:12:53,214


1177
01:12:50,756 --> 01:12:53,455
이것이 왜 도움이되는지에 대한
좋은 이유가 아니라이 백서에서

1178
01:12:53,455 --> 01:12:56,600
그들은 여기에 다른 아키텍처가 있다고 말하고 있습니다.

1179
01:12:56,600 --> 01:12:59,217
우리가 소개하고있는 것은 잔여 표현이 아닙니다.

1180
01:12:59,217 --> 01:13:01,884
우리는 그 열쇠가 전환에 더 많은 것이라고 생각합니다.

1181
01:13:01,884 --> 01:13:04,708
효과적으로 얕은 네트워크에서 깊은 네트워크로,

1182
01:13:03,054 --> 01:13:08,638


1183
01:13:04,708 --> 01:13:07,203
그래서 그들은이 프랙탈 아키텍처를 가지고 있습니다.

1184
01:13:07,203 --> 01:13:09,901
네가 여기 오른쪽을 보면,

1185
01:13:08,638 --> 01:13:19,934


1186
01:13:09,901 --> 01:13:14,068
그들이이 프랙탈 패션에서 그것을 구성하는 이들 층.

1187
01:13:15,579 --> 01:13:18,199
그래서 얕은 통로와 깊은 통로가 있습니다.

1188
01:13:18,199 --> 01:13:19,449
귀하의 산출물에

1189
01:13:20,855 --> 01:13:23,269
그래서 그들은 서로 다른 길이의 경로를 가지고 있습니다.

1190
01:13:23,269 --> 01:13:26,046
그들은 하위 경로를 버리고 훈련시키고,

1191
01:13:26,046 --> 01:13:30,378
그리고 다시 한번이 드롭 아웃 종류의 향이 있습니다.

1192
01:13:30,378 --> 01:13:33,151
테스트 시간에 그들은 전체 프랙탈
네트워크를 사용할 것입니다.

1193
01:13:30,875 --> 01:13:35,956


1194
01:13:33,151 --> 01:13:35,846
그들은 이것이 가능하다는 것을 보여줍니다.

1195
01:13:35,846 --> 01:13:38,013
아주 좋은 성능을 얻으십시오.

1196
01:13:39,857 --> 01:13:42,953
Densely Connected라고하는
또 다른 아이디어가 있습니다.

1197
01:13:42,953 --> 01:13:45,696
길쌈 네트워크, DenseNet 및이 아이디어

1198
01:13:44,253 --> 01:13:51,817


1199
01:13:45,696 --> 01:13:48,397
이제 우리는이 블럭들이 호출됩니다.

1200
01:13:48,397 --> 01:13:49,377
고밀도 블록.

1201
01:13:49,377 --> 01:13:51,588
그리고 각 블록 내에서 각 레이어는

1202
01:13:51,588 --> 01:13:55,238
그 후에 모든 다른 레이어에 연결되어,

1203
01:13:51,817 --> 01:13:53,275


1204
01:13:53,275 --> 01:13:58,974


1205
01:13:55,238 --> 01:13:56,750
이 피드 포워드 방식으로

1206
01:13:56,750 --> 01:13:58,312
따라서이 블록 내에서 블록에 대한 입력

1207
01:13:58,312 --> 01:14:01,172
다른 모든 전환 레이어에 대한 입력이기도합니다.

1208
01:13:58,974 --> 01:14:07,497


1209
01:14:01,172 --> 01:14:04,764
그리고 당신이 각각의 conv 출력을 계산할 때,

1210
01:14:04,764 --> 01:14:06,609
그 출력은 이제 모든

1211
01:14:06,609 --> 01:14:09,589
후에 레이어를 연결 한 다음 모두 연결합니다.

1212
01:14:07,497 --> 01:14:11,036


1213
01:14:09,589 --> 01:14:12,500
전환 레이어에 대한 입력으로

1214
01:14:11,036 --> 01:14:17,278


1215
01:14:12,500 --> 01:14:16,262
그들에게는 줄이기위한 다른 과정들이있다.

1216
01:14:16,262 --> 01:14:19,453
차원과 효율적인 유지.

1217
01:14:17,278 --> 01:14:21,294


1218
01:14:19,453 --> 01:14:23,329
그리고 이것으로부터 그들의 주요 테이크 아웃은,

1219
01:14:21,294 --> 01:14:25,438


1220
01:14:23,329 --> 01:14:26,843
그들은 이것이 완화되고 있다고 주장한다.

1221
01:14:25,438 --> 01:14:31,455


1222
01:14:26,843 --> 01:14:29,790
이 모든 것이 있기 때문에 사라지는 그라디언트 문제

1223
01:14:29,790 --> 01:14:31,673
매우 조밀 한 연결.

1224
01:14:31,673 --> 01:14:35,722
그것은 특징 전파를 강화하고 또한 격려한다.

1225
01:14:35,722 --> 01:14:38,134
미래의 사용 권리는 너무 많기 때문에

1226
01:14:38,134 --> 01:14:41,807
학습하고있는 각 기능지도를 연결합니다.

1227
01:14:40,174 --> 01:14:42,796


1228
01:14:41,807 --> 01:14:44,630
나중에 여러 개의 레이어에 입력되고

1229
01:14:42,796 --> 01:14:47,358


1230
01:14:44,630 --> 01:14:46,297
여러 번 사용되었습니다.

1231
01:14:47,358 --> 01:14:51,417


1232
01:14:48,716 --> 01:14:50,813
그래서 이것들은 단지 몇 가지 아이디어 일뿐입니다.

1233
01:14:50,813 --> 01:14:55,025
당신은 대안을 알고 있습니다. 그렇지
않으면 우리가 할 수있는 것이 없습니다.

1234
01:14:51,417 --> 01:14:54,410


1235
01:14:55,025 --> 01:14:57,836
ResNets과 아직 수행 중입니다

1236
01:14:57,836 --> 01:15:00,784
ResNets과 비슷하거나 더 낫습니다.

1237
01:14:58,596 --> 01:15:02,432


1238
01:15:00,784 --> 01:15:03,816
현재 연구 중 또 다른 매우 활발한 분야.

1239
01:15:02,432 --> 01:15:04,436


1240
01:15:03,816 --> 01:15:05,501
이 많은 것들이보고 있다는 것을 알 수 있습니다.

1241
01:15:04,436 --> 01:15:09,314


1242
01:15:05,501 --> 01:15:09,057
서로 다른 레이어가 서로 연결되는 방식으로

1243
01:15:09,057 --> 01:15:12,640
그리고 이러한 네트워크에서 깊이가
관리되는 방법에 대해 설명합니다.

1244
01:15:09,314 --> 01:15:12,318


1245
01:15:12,318 --> 01:15:17,817


1246
01:15:14,338 --> 01:15:15,808
그리고 내가 언급하고 싶은 마지막 한가지

1247
01:15:15,808 --> 01:15:18,801
빠르게 효율적인 네트워크 일뿐입니다.

1248
01:15:18,801 --> 01:15:21,831
효율성에 대한 아이디어와 GoogleNet을 보았습니다.

1249
01:15:21,831 --> 01:15:24,216
이 방향을 연구 한 작품이었습니다.

1250
01:15:24,216 --> 01:15:27,240
우리가 어떻게 중요한 네트워크를 효율적으로 만들 수 있는지

1251
01:15:27,240 --> 01:15:30,260
당신은 실용적인 사용법을 많이 알고 있습니다.

1252
01:15:30,260 --> 01:15:34,804
특히 배포와 마찬가지로

1253
01:15:34,804 --> 01:15:38,737
SqueezeNet이라고하는 또 다른 최근 네트워크

1254
01:15:38,737 --> 01:15:40,744
매우 효율적인 네트워크를 찾고 있습니다.

1255
01:15:40,744 --> 01:15:42,428
그들은 화재 모듈 (fire modules)

1256
01:15:42,428 --> 01:15:45,095
많은 스퀴즈 레이어로 구성되어 있습니다.

1257
01:15:43,534 --> 01:15:49,417


1258
01:15:45,095 --> 01:15:47,674
하나씩 필터를 적용한 다음 피드를

1259
01:15:47,674 --> 01:15:50,455
하나씩 및 3 x 3 필터를 갖는 확장 레이어,

1260
01:15:49,417 --> 01:15:53,761


1261
01:15:50,455 --> 01:15:53,490
그리고 그들은 이런 종류의 건축물로
그것을 보여주고 있습니다.

1262
01:15:53,490 --> 01:15:57,820
그들은 ImageNet에서 AlexNet
수준의 정확성을 얻을 수 있으며,

1263
01:15:54,596 --> 01:15:57,252


1264
01:15:57,820 --> 01:16:00,030
그러나 50 배 적은 매개 변수로,

1265
01:16:00,030 --> 01:16:03,140
그런 다음 네트워크 압축을 추가로 수행 할 수 있습니다.

1266
01:16:03,140 --> 01:16:06,903
AlexNet보다 500 배나 더 작아 지도록

1267
01:16:06,903 --> 01:16:10,905
전체 네트워크가 0.5 메가가되도록하십시오.

1268
01:16:07,852 --> 01:16:13,772


1269
01:16:10,905 --> 01:16:13,691
그래서 이것은 우리가 어떻게 할 것인가의 방향입니다.

1270
01:16:13,691 --> 01:16:15,572
효율적인 네트워크 모델 압축

1271
01:16:15,572 --> 01:16:17,955
나중에 강의에서 더 자세히 다루겠습니다.

1272
01:16:17,955 --> 01:16:20,872
그러나 당신에게 그 힌트를주는 것뿐입니다.

1273
01:16:22,666 --> 01:16:26,351
오늘 우리는 여러 종류의 이야기를했습니다.

1274
01:16:26,351 --> 01:16:27,619
CNN 아키텍처의

1275
01:16:27,619 --> 01:16:30,568
주요 아키텍처 중 네 가지를 자세히 살펴 보았습니다.

1276
01:16:30,568 --> 01:16:32,365
넓은 사용법에서 볼 수 있습니다.

1277
01:16:32,365 --> 01:16:36,363
초기 인기 네트워크 중 하나 인 AlexNet.

1278
01:16:32,951 --> 01:16:37,710


1279
01:16:36,363 --> 01:16:39,642
VGG 및 GoogleNet과 같이 널리 사용됩니다.

1280
01:16:39,642 --> 01:16:43,695
그러나 ResNet은 일종의 인계 역할을합니다.

1281
01:16:43,695 --> 01:16:46,716
당신이 할 수있을 때 가장 많이보고 있어야합니다.

1282
01:16:46,716 --> 01:16:47,943
우리는 또한이 다른 네트워크들을 보았습니다.

1283
01:16:47,943 --> 01:16:50,147
간단히 조금 더 깊이 들어

1284
01:16:50,147 --> 01:16:51,397
레벨 개요.

1285
01:16:52,731 --> 01:16:55,315
그리고이 테이크 아웃을 사용할 수있는 이러한 모델

1286
01:16:53,510 --> 01:16:58,849


1287
01:16:55,315 --> 01:16:57,974
그들은 당신이 그들을 사용할 수 있도록
많은 [mumbles]에 있습니다.

1288
01:16:57,974 --> 01:16:59,038
필요할 때.

1289
01:16:59,038 --> 01:17:01,085
극도로 깊은 네트워크 경향이 있습니다.

1290
01:17:01,085 --> 01:17:04,804
그러나 또한 중요한 연구가 주변에있다.

1291
01:17:04,804 --> 01:17:07,637
우리가 어떻게 레이어를 연결하는지에 대한 디자인,

1292
01:17:05,207 --> 01:17:13,190


1293
01:17:07,637 --> 01:17:10,785
연결을 건너 뛰고, 무엇이 무엇에 연결되어 있는지,

1294
01:17:10,785 --> 01:17:14,343
또한 이들을 사용하여 아키텍처를 설계하십시오.

1295
01:17:13,190 --> 01:17:15,809


1296
01:17:14,343 --> 01:17:16,229
그래디언트 흐름을 개선합니다.

1297
01:17:16,229 --> 01:17:19,013
최근의 추세에 대한 검토가 있습니다.

1298
01:17:19,013 --> 01:17:22,246
깊이 대 너비의 필요성은 무엇입니까?

1299
01:17:21,233 --> 01:17:25,649


1300
01:17:22,246 --> 01:17:23,558
잔여 연결.

1301
01:17:23,558 --> 01:17:25,358
트레이드 오프, 실제로 문제를 돕는 것,

1302
01:17:25,358 --> 01:17:28,356
최근의 많은 작품들이 있습니다.

1303
01:17:25,649 --> 01:17:29,969


1304
01:17:28,356 --> 01:17:30,153
이 방향으로 볼 수있다.

1305
01:17:30,153 --> 01:17:32,190
당신이 관심이 있다면 내가 지적한 것들 중 일부.

1306
01:17:32,190 --> 01:17:34,407
그리고 다음에 우리는 재발 신경
네트워크에 대해서 이야기 할 것입니다.

1307
01:17:34,407 --> 00:00:00,000
감사.

1308
01:17:34,710 --> 01:17:41,270


1309
01:17:41,270 --> 01:17:47,393


1310
01:17:47,393 --> 01:17:52,045


1311
01:17:53,169 --> 01:17:55,691

